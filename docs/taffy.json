[
    {
        "comment": "/**\n * @module Either\n * @description Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, porro dolorem blanditiis minima harum corporis praesentium animi sunt libero officia, illo esse sed in, commodi quibusdam ipsum nam mollitia dolor.\n */",
        "meta": {
            "range": [
                180,
                440
            ],
            "filename": "Either.js",
            "lineno": 12,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "kind": "module",
        "name": "Either",
        "description": "<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, porro dolorem blanditiis minima harum corporis praesentium animi sunt libero officia, illo esse sed in, commodi quibusdam ipsum nam mollitia dolor.</p>",
        "longname": "module:Either",
        "___id": "T000002R000002",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                529,
                590
            ],
            "filename": "Either.js",
            "lineno": 22,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000037",
                "name": "Right",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Right",
        "name": "Right",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000008",
        "description": "<p>Create an Either as a Right value</p>",
        "comment": "/**\n * Create an Either as a Right value\n * @param {any} value\n * @return {Either}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                680,
                741
            ],
            "filename": "Either.js",
            "lineno": 33,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000046",
                "name": "Left",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Left",
        "name": "Left",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000009",
        "description": "<p>Create an Either as a Left value</p>",
        "comment": "/**\n * Create an Either as a Left value\n * @param {any} value\n * @return {Either}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                964,
                1087
            ],
            "filename": "Either.js",
            "lineno": 44,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000055",
                "name": "Try",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "func"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "func"
            }
        ],
        "longname": "module:Either~Try",
        "name": "Try",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000010",
        "description": "<p>Create a Try Either. <code>func</code> is immediately exceuted,\nif an error is thrown the Either will be Left(error) otherwise\nthe value of <code>func</code> is passed to a Right.</p>",
        "comment": "/**\n * Create a Try Either. `func` is immediately exceuted,\n * if an error is thrown the Either will be Left(error) otherwise\n * the value of `func` is passed to a Right.\n * @param {Function} func\n * @return {Either}\n */"
    },
    {
        "meta": {
            "range": [
                1113,
                2683
            ],
            "filename": "Either.js",
            "lineno": 55,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000073",
                "name": "Either",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isRight"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isRight"
            }
        ],
        "longname": "module:Either~Either",
        "classdesc": "<p>Either class</p>",
        "name": "Either",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000011",
        "comment": "/**\n * Either class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1416,
                1464
            ],
            "filename": "Either.js",
            "lineno": 71,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000094",
                "name": "Either#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Either#unit",
        "name": "unit",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000015",
        "description": "<p>Unit function</p>",
        "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1553,
                1623
            ],
            "filename": "Either.js",
            "lineno": 80,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000103",
                "name": "Either#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#flatMap",
        "name": "flatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000016",
        "description": "<p>flatMap</p>",
        "comment": "/**\n     * flatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1708,
                1783
            ],
            "filename": "Either.js",
            "lineno": 89,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000119",
                "name": "Either#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#map",
        "name": "map",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000017",
        "description": "<p>map</p>",
        "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1876,
                1950
            ],
            "filename": "Either.js",
            "lineno": 98,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000138",
                "name": "Either#leftFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftFlatMap",
        "name": "leftFlatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000018",
        "description": "<p>leftFlatMap</p>",
        "comment": "/**\n     * leftFlatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2039,
                2117
            ],
            "filename": "Either.js",
            "lineno": 107,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000154",
                "name": "Either#leftMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftMap",
        "name": "leftMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000019",
        "description": "<p>leftMap</p>",
        "comment": "/**\n     * leftMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2209,
                2308
            ],
            "filename": "Either.js",
            "lineno": 116,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000171",
                "name": "Either#ap",
                "type": "MethodDefinition",
                "paramnames": [
                    "eitherWithFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                },
                "name": "eitherWithFn"
            }
        ],
        "longname": "module:Either~Either#ap",
        "name": "ap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000020",
        "description": "<p>ap</p>",
        "comment": "/**\n     * ap\n     * @param {Either} eitherWithFn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2428,
                2525
            ],
            "filename": "Either.js",
            "lineno": 126,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000193",
                "name": "Either#cata",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftFn",
                    "rightFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "leftFn"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "rightFn"
            }
        ],
        "longname": "module:Either~Either#cata",
        "name": "cata",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000021",
        "description": "<p>cata</p>",
        "comment": "/**\n     * cata\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {any}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2585,
                2681
            ],
            "filename": "Either.js",
            "lineno": 134,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000214",
                "name": "Either#toMaybe",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#toMaybe",
        "name": "toMaybe",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000022",
        "description": "<p>toMaybe</p>",
        "comment": "/**\n     * toMaybe\n     * @return {Maybe}\n     */"
    },
    {
        "comment": "/**\n * @module Maybe\n * @description Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, porro dolorem blanditiis minima harum corporis praesentium animi sunt libero officia, illo esse sed in, commodi quibusdam ipsum nam mollitia dolor.\n */",
        "meta": {
            "range": [
                307,
                566
            ],
            "filename": "Maybe.js",
            "lineno": 15,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "kind": "module",
        "name": "Maybe",
        "description": "<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, porro dolorem blanditiis minima harum corporis praesentium animi sunt libero officia, illo esse sed in, commodi quibusdam ipsum nam mollitia dolor.</p>",
        "longname": "module:Maybe",
        "___id": "T000002R000024",
        "___s": true
    },
    {
        "meta": {
            "range": [
                750,
                809
            ],
            "filename": "Maybe.js",
            "lineno": 30,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000296",
                "name": "Some",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [],
        "longname": "module:Maybe~Some",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: Some({\n        name: \"Derek Tibbs Jr\"\n    })\n});"
        ],
        "name": "Some",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000032",
        "description": "<p>Creates a new Maybe as 'Some' value</p>",
        "comment": "/**\n * Creates a new Maybe as 'Some' value\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: Some({\n *         name: \"Derek Tibbs Jr\"\n *     })\n * });\n */"
    },
    {
        "meta": {
            "range": [
                954,
                1008
            ],
            "filename": "Maybe.js",
            "lineno": 45,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000305",
                "name": "None",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "params": [],
        "longname": "module:Maybe~None",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: None()\n});"
        ],
        "name": "None",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000033",
        "description": "<p>Creates a new Maybe as 'None' value</p>",
        "comment": "/**\n * Creates a new Maybe as 'None' value\n *\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: None()\n * });\n */"
    },
    {
        "meta": {
            "range": [
                1010,
                1199
            ],
            "filename": "Maybe.js",
            "lineno": 49,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>The value to store</p>",
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<p>Whether or not the maybe is <code>some</code> or <code>none</code></p>",
                "name": "isSome"
            }
        ],
        "longname": "module:Maybe~Maybe",
        "name": "Maybe",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000034",
        "description": "<p>Maybe constructor</p>",
        "comment": "/**\n * Maybe constructor\n *\n * @param {*} value - The value to store\n * @param {boolean} isSome - Whether or not the maybe is `some` or `none`\n *\n * @class\n * @name Maybe\n * @kind class\n */"
    },
    {
        "meta": {
            "range": [
                1519,
                1566
            ],
            "filename": "Maybe.js",
            "lineno": 77,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000349",
                "name": "Maybe#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Maybe~Maybe#unit",
        "name": "unit",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000040",
        "description": "<p>Unit function</p>\n<h4><code>maybe.unit(A): Some[A]</code></h4><pre class=\"prettyprint source\"><code>Maybe</code></pre>",
        "comment": "/**\n     * Unit function\n     *\n     * #### `maybe.unit(A): Some[A]`\n     * ```\n     * Maybe\n     * ```\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Some"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1755,
                1824
            ],
            "filename": "Maybe.js",
            "lineno": 89,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000358",
                "name": "Maybe#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>perform a flatMap if Some</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Maybe~Maybe~flatMap",
        "name": "flatMap",
        "memberof": "module:Maybe~Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000041",
        "description": "<p>Perform a flatMap on the current maybe</p>",
        "comment": "/**\n     * Perform a flatMap on the current maybe\n     *\n     * @param {Function} fn - perform a flatMap if Some\n     * @return {Some}\n     * @kind function\n     * @inner\n     */"
    },
    {
        "meta": {
            "range": [
                1916,
                1991
            ],
            "filename": "Maybe.js",
            "lineno": 98,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000374",
                "name": "Maybe#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Maybe~Maybe~map",
        "name": "map",
        "memberof": "module:Maybe~Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000042",
        "description": "<p><code>map(fn: A =&gt; B): Some(B)</code></p>",
        "comment": "/**\n     * `map(fn: A => B): Some(B)`\n     * @kind function\n     * @inner\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2214,
                2307
            ],
            "filename": "Maybe.js",
            "lineno": 110,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000393",
                "name": "Maybe#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "<p>value that is Some</p>",
                "name": "defaultValue"
            }
        ],
        "longname": "module:Maybe~Maybe~value",
        "name": "value",
        "memberof": "module:Maybe~Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000043",
        "description": "<p>Return the maybe's value if it is 'some' or else return <code>defaultValue</code></p>",
        "comment": "/**\n     * Return the maybe's value if it is 'some' or else return `defaultValue`\n     *\n     * @kind function\n     * @inner\n     * @param {*} [defaultValue = null] - value that is Some\n     * @return {*}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2581,
                2698
            ],
            "filename": "Maybe.js",
            "lineno": 122,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000411",
                "name": "Maybe#toEither",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "optional": true,
                "description": "<p>Value to place in the Left side</p>",
                "name": "leftValue"
            }
        ],
        "longname": "module:Maybe~Maybe~toEither",
        "name": "toEither",
        "memberof": "module:Maybe~Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000044",
        "description": "<p>Change the Maybe to an Either. If <code>Some</code> the value is placed in <code>Right</code>\nif <code>None</code> the value of <code>leftValue</code> is placed in a <code>Left</code></p>",
        "comment": "/**\n     * Change the Maybe to an Either. If `Some` the value is placed in `Right`\n     * if `None` the value of `leftValue` is placed in a `Left`\n     *\n     * @inner\n     * @param {*} [leftValue] - Value to place in the Left side\n     * @return {Either}\n     */"
    },
    {
        "comment": "/**\n * @module RequestState\n * @description Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, porro dolorem blanditiis minima harum corporis praesentium animi sunt libero officia, illo esse sed in, commodi quibusdam ipsum nam mollitia dolor.\n */",
        "meta": {
            "range": [
                240,
                506
            ],
            "filename": "RequestState.js",
            "lineno": 12,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "kind": "module",
        "name": "RequestState",
        "description": "<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellendus, porro dolorem blanditiis minima harum corporis praesentium animi sunt libero officia, illo esse sed in, commodi quibusdam ipsum nam mollitia dolor.</p>",
        "longname": "module:RequestState",
        "___id": "T000002R000046",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                614,
                695
            ],
            "filename": "RequestState.js",
            "lineno": 22,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000480",
                "name": "RequestEmpty",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestEmpty",
        "name": "RequestEmpty",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000052",
        "description": "<p>Create an RequestState as a RequestEmpty value</p>",
        "comment": "/**\n * Create an RequestState as a RequestEmpty value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                805,
                894
            ],
            "filename": "RequestState.js",
            "lineno": 31,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000490",
                "name": "RequestFetching",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestFetching",
        "name": "RequestFetching",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000053",
        "description": "<p>Create a RequestState as a RequestFetching value</p>",
        "comment": "/**\n * Create a RequestState as a RequestFetching value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1001,
                1087
            ],
            "filename": "RequestState.js",
            "lineno": 40,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000501",
                "name": "RequestError",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestError",
        "name": "RequestError",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000054",
        "description": "<p>Create a RequestState as a RequestError value</p>",
        "comment": "/**\n * Create a RequestState as a RequestError value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1196,
                1284
            ],
            "filename": "RequestState.js",
            "lineno": 49,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000512",
                "name": "RequestSuccess",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestSuccess",
        "name": "RequestSuccess",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000055",
        "description": "<p>Create a RequestState as a RequestSuccess value</p>",
        "comment": "/**\n * Create a RequestState as a RequestSuccess value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "meta": {
            "range": [
                1316,
                3217
            ],
            "filename": "RequestState.js",
            "lineno": 56,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000523",
                "name": "RequestState",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isFetching",
                    "isError",
                    "isSuccess"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isFetching"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isError"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isSuccess"
            }
        ],
        "longname": "module:RequestState~RequestState",
        "classdesc": "<p>RequestState class</p>",
        "name": "RequestState",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000056",
        "comment": "/**\n * RequestState class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1744,
                1822
            ],
            "filename": "RequestState.js",
            "lineno": 76,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000558",
                "name": "RequestState#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#map",
        "name": "map",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000062",
        "description": "<p>map</p>",
        "comment": "/**\n   * map\n   * @param {any} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1896,
                1962
            ],
            "filename": "RequestState.js",
            "lineno": 85,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000576",
                "name": "RequestState#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#flatMap",
        "name": "flatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000063",
        "description": "<p>flatMap</p>",
        "comment": "/**\n   * flatMap\n   * @param {Function} fn\n   * @return {any}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2049,
                2137
            ],
            "filename": "RequestState.js",
            "lineno": 94,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000592",
                "name": "RequestState#fetchingMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#fetchingMap",
        "name": "fetchingMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000064",
        "description": "<p>fetchingMap</p>",
        "comment": "/**\n   * fetchingMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2228,
                2303
            ],
            "filename": "RequestState.js",
            "lineno": 103,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000610",
                "name": "RequestState#fetchingFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#fetchingFlatMap",
        "name": "fetchingFlatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000065",
        "description": "<p>fetchingFlatMap</p>",
        "comment": "/**\n   * fetchingFlatMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2387,
                2466
            ],
            "filename": "RequestState.js",
            "lineno": 112,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000626",
                "name": "RequestState#errorMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#errorMap",
        "name": "errorMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000066",
        "description": "<p>errorMap</p>",
        "comment": "/**\n   * errorMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2554,
                2623
            ],
            "filename": "RequestState.js",
            "lineno": 121,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000644",
                "name": "RequestState#errorFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#errorFlatMap",
        "name": "errorFlatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000067",
        "description": "<p>errorFlatMap</p>",
        "comment": "/**\n   * errorFlatMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2683,
                2739
            ],
            "filename": "RequestState.js",
            "lineno": 129,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000660",
                "name": "RequestState#toFetching",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toFetching",
        "name": "toFetching",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000068",
        "description": "<p>toFetching</p>",
        "comment": "/**\n   * toFetching\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2796,
                2846
            ],
            "filename": "RequestState.js",
            "lineno": 137,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000670",
                "name": "RequestState#toError",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toError",
        "name": "toError",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000069",
        "description": "<p>toError</p>",
        "comment": "/**\n   * toError\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2905,
                2959
            ],
            "filename": "RequestState.js",
            "lineno": 145,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000680",
                "name": "RequestState#toSuccess",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toSuccess",
        "name": "toSuccess",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000070",
        "description": "<p>toSuccess</p>",
        "comment": "/**\n   * toSuccess\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3016,
                3058
            ],
            "filename": "RequestState.js",
            "lineno": 153,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000690",
                "name": "RequestState#toEmpty",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toEmpty",
        "name": "toEmpty",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000071",
        "description": "<p>toEmpty</p>",
        "comment": "/**\n   * toEmpty\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3135,
                3215
            ],
            "filename": "RequestState.js",
            "lineno": 162,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000697",
                "name": "RequestState#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "defaultValue"
            }
        ],
        "longname": "module:RequestState~RequestState#value",
        "name": "value",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000072",
        "description": "<p>value</p>",
        "comment": "/**\n   * value\n   * @param {any} defaultValue\n   * @return {any}\n   */"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/allanhortle/localhost/code/fronads/src/Either.js",
            "/Users/allanhortle/localhost/code/fronads/src/Maybe.js",
            "/Users/allanhortle/localhost/code/fronads/src/RequestState.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Either-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Maybe-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/RequestState-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/index.js"
        ],
        "___id": "T000002R000132",
        "___s": true
    }
]