[
    {
        "comment": "/**\n * The Either monad describes situations that have two distinct states: Right and Left. Often used\n * If the Either is Right map/Flatmap will be called and if the Either is Left leftMap/leftFlatMap will be called.\n *\n * If Identity has 1 state, Maybe has 1.5, Either has 2.\n *\n * @module Either\n */",
        "meta": {
            "range": [
                247,
                549
            ],
            "filename": "Either.js",
            "lineno": 14,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>The Either monad describes situations that have two distinct states: Right and Left. Often used\nIf the Either is Right map/Flatmap will be called and if the Either is Left leftMap/leftFlatMap will be called.</p>\n<p>If Identity has 1 state, Maybe has 1.5, Either has 2.</p>",
        "kind": "module",
        "name": "Either",
        "longname": "module:Either",
        "___id": "T000002R000009",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                757,
                805
            ],
            "filename": "Either.js",
            "lineno": 35,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000070",
                "name": "Either#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Either#unit",
        "name": "unit",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000014",
        "description": "<p>Unit function</p>",
        "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                894,
                964
            ],
            "filename": "Either.js",
            "lineno": 44,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000079",
                "name": "Either#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#flatMap",
        "name": "flatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000015",
        "description": "<p>flatMap</p>",
        "comment": "/**\n     * flatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1049,
                1124
            ],
            "filename": "Either.js",
            "lineno": 53,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000095",
                "name": "Either#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#map",
        "name": "map",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000016",
        "description": "<p>map</p>",
        "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1217,
                1291
            ],
            "filename": "Either.js",
            "lineno": 62,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000114",
                "name": "Either#leftFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftFlatMap",
        "name": "leftFlatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000017",
        "description": "<p>leftFlatMap</p>",
        "comment": "/**\n     * leftFlatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1380,
                1458
            ],
            "filename": "Either.js",
            "lineno": 71,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000130",
                "name": "Either#leftMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftMap",
        "name": "leftMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000018",
        "description": "<p>leftMap</p>",
        "comment": "/**\n     * leftMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1550,
                1649
            ],
            "filename": "Either.js",
            "lineno": 80,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000147",
                "name": "Either#ap",
                "type": "MethodDefinition",
                "paramnames": [
                    "eitherWithFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                },
                "name": "eitherWithFn"
            }
        ],
        "longname": "module:Either~Either#ap",
        "name": "ap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000019",
        "description": "<p>ap</p>",
        "comment": "/**\n     * ap\n     * @param {Either} eitherWithFn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1817,
                1919
            ],
            "filename": "Either.js",
            "lineno": 90,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000169",
                "name": "Either#biMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftFn",
                    "rightFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "leftFn"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "rightFn"
            }
        ],
        "longname": "module:Either~Either#biMap",
        "name": "biMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000020",
        "description": "<p>Provide functions to map both sides of the Either</p>",
        "comment": "/**\n     * Provide functions to map both sides of the Either\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2047,
                2149
            ],
            "filename": "Either.js",
            "lineno": 100,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000190",
                "name": "Either#biFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftFn",
                    "rightFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "leftFn"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "rightFn"
            }
        ],
        "longname": "module:Either~Either#biFlatMap",
        "name": "biFlatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000021",
        "description": "<p>biFlatMap</p>",
        "comment": "/**\n     * biFlatMap\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2225,
                2265
            ],
            "filename": "Either.js",
            "lineno": 108,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000211",
                "name": "Either#value",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#value",
        "name": "value",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000022",
        "description": "<p>Return the current value.</p>",
        "comment": "/**\n     * Return the current value.\n     * @return {any}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2425,
                2519
            ],
            "filename": "Either.js",
            "lineno": 117,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000219",
                "name": "Either#filter",
                "type": "MethodDefinition",
                "paramnames": [
                    "predicate"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "predicate"
            }
        ],
        "longname": "module:Either~Either#filter",
        "name": "filter",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000023",
        "description": "<p>Change the Either to a Right or Left based on the result of a predicate</p>",
        "comment": "/**\n     * Change the Either to a Right or Left based on the result of a predicate\n     * @param {Function} predicate\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Left"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2597,
                2644
            ],
            "filename": "Either.js",
            "lineno": 125,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000239",
                "name": "Either#toLeft",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#toLeft",
        "name": "toLeft",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000024",
        "description": "<p>Force the Either to a Left</p>",
        "comment": "/**\n     * Force the Either to a Left\n     * @return {Left}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Right"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2724,
                2773
            ],
            "filename": "Either.js",
            "lineno": 133,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000249",
                "name": "Either#toRight",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#toRight",
        "name": "toRight",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000025",
        "description": "<p>Force the Either to a Right</p>",
        "comment": "/**\n     * Force the Either to a Right\n     * @return {Right}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2924,
                3020
            ],
            "filename": "Either.js",
            "lineno": 141,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000259",
                "name": "Either#toMaybe",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#toMaybe",
        "name": "toMaybe",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000026",
        "description": "<p>If the Either is a right change to a Some if the Either is a Left drop the value and return a None</p>",
        "comment": "/**\n     * If the Either is a right change to a Some if the Either is a Left drop the value and return a None\n     * @return {Maybe}\n     */"
    },
    {
        "meta": {
            "range": [
                3096,
                3298
            ],
            "filename": "Either.js",
            "lineno": 150,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isRight"
            }
        ],
        "longname": "module:Either~Either",
        "name": "Either",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000029",
        "comment": "/**\n                          *\n                          * @class Either\n                          * @param {any} value\n                          * @param {boolean} isRight\n                          */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3470,
                3534
            ],
            "filename": "Either.js",
            "lineno": 166,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000307",
                "name": "Right",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Right",
        "name": "Right",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000031",
        "description": "<p>Create an Either as a Right value</p>",
        "comment": "/**\n * Create an Either as a Right value\n * @param {any} value\n * @return {Either}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3622,
                3686
            ],
            "filename": "Either.js",
            "lineno": 175,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000316",
                "name": "Left",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Left",
        "name": "Left",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000032",
        "description": "<p>Create an Either as a Left value</p>",
        "comment": "/**\n * Create an Either as a Left value\n * @param {any} value\n * @return {Either}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3909,
                4032
            ],
            "filename": "Either.js",
            "lineno": 186,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000325",
                "name": "Try",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "func"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "func"
            }
        ],
        "longname": "module:Either~Try",
        "name": "Try",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000033",
        "description": "<p>Create a Try Either. <code>func</code> is immediately exceuted,\nif an error is thrown the Either will be Left(error) otherwise\nthe value of <code>func</code> is passed to a Right.</p>",
        "comment": "/**\n * Create a Try Either. `func` is immediately exceuted,\n * if an error is thrown the Either will be Left(error) otherwise\n * the value of `func` is passed to a Right.\n * @param {Function} func\n * @return {Either}\n */"
    },
    {
        "comment": "/**\n * Identity is the vanilla ice cream of monads. Plain and simple, it is a function composer with only one state.\n * Identity says: \"I will always map your function to my value\".\n *\n * ```\n * // Composition\n * foo(bar(value));\n *\n * // Compose\n * Compose(foo, bar)(value);\n *\n * // Identity\n * Identity(value)\n *     .map(bar)\n *     .map(value)\n *     .value();\n *\n * ```\n *\n * ### Examples\n * * Hocks\n * * repeated Composition.\n *\n * ```js\n * import {Identity} from 'fronads';\n *\n * const add = aa => bb => aa + bb;\n *\n * Identity(5)\n *     .map(add(2))\n *     .map(add(-10))\n *     .value();\n * // -3\n *\n *\n * // Hocking a React component.\n * Some(UserProfile)\n *     .map(connect(({user}) => ({user}))\n *     .value();\n * ```\n * @module Identity\n */",
        "meta": {
            "range": [
                571,
                1327
            ],
            "filename": "Identity.js",
            "lineno": 31,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>Identity is the vanilla ice cream of monads. Plain and simple, it is a function composer with only one state.\nIdentity says: &quot;I will always map your function to my value&quot;.</p>\n<pre class=\"prettyprint source\"><code>// Composition\nfoo(bar(value));\n\n// Compose\nCompose(foo, bar)(value);\n\n// Identity\nIdentity(value)\n    .map(bar)\n    .map(value)\n    .value();</code></pre><h3>Examples</h3><ul>\n<li>Hocks</li>\n<li>repeated Composition.</li>\n</ul>\n<pre class=\"prettyprint source lang-js\"><code>import {Identity} from 'fronads';\n\nconst add = aa => bb => aa + bb;\n\nIdentity(5)\n    .map(add(2))\n    .map(add(-10))\n    .value();\n// -3\n\n\n// Hocking a React component.\nSome(UserProfile)\n    .map(connect(({user}) => ({user}))\n    .value();</code></pre>",
        "kind": "module",
        "name": "Identity",
        "longname": "module:Identity",
        "___id": "T000002R000034",
        "___s": true
    },
    {
        "meta": {
            "range": [
                1355,
                2669
            ],
            "filename": "Identity.js",
            "lineno": 77,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000380",
                "name": "Identity",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>The value to store</p>",
                "name": "value"
            }
        ],
        "longname": "module:Identity~Identity",
        "classdesc": "<p>Identity class</p>",
        "name": "Identity",
        "memberof": "module:Identity",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000040",
        "description": "<p>Identity constructor</p>",
        "comment": "/**\n * Identity class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Identity"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1646,
                1704
            ],
            "filename": "Identity.js",
            "lineno": 94,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000394",
                "name": "Identity#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Identity~Identity#unit",
        "name": "unit",
        "memberof": "module:Identity~Identity",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000043",
        "description": "<p>Unit function</p>",
        "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Identity}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Some"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1852,
                1900
            ],
            "filename": "Identity.js",
            "lineno": 104,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000403",
                "name": "Identity#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>perform a flatMap</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Identity~Identity#flatMap",
        "name": "flatMap",
        "memberof": "module:Identity~Identity",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000044",
        "description": "<p>Perform a flatMap on the current identity</p>",
        "comment": "/**\n     * Perform a flatMap on the current identity\n     *\n     * @param {Function} fn - perform a flatMap\n     * @return {Some}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Identity"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1987,
                2062
            ],
            "filename": "Identity.js",
            "lineno": 113,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000414",
                "name": "Identity#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Identity~Identity#map",
        "name": "map",
        "memberof": "module:Identity~Identity",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000045",
        "description": "<p>map</p>",
        "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Identity}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2223,
                2316
            ],
            "filename": "Identity.js",
            "lineno": 122,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000433",
                "name": "Identity#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "defaultValue"
            }
        ],
        "longname": "module:Identity~Identity#value",
        "name": "value",
        "memberof": "module:Identity~Identity",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000046",
        "description": "<p>Return the identity's value. If the value is null, return <code>defaultValue</code></p>",
        "comment": "/**\n     * Return the identity's value. If the value is null, return `defaultValue`\n     * @param {*} [defaultValue = null]\n     * @return {*}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2408,
                2471
            ],
            "filename": "Identity.js",
            "lineno": 130,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000451",
                "name": "Identity#toEither",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Identity~Identity#toEither",
        "name": "toEither",
        "memberof": "module:Identity~Identity",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000047",
        "description": "<p>Change the Identity to a Right Either.</p>",
        "comment": "/**\n     * Change the Identity to a Right Either.\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2560,
                2620
            ],
            "filename": "Identity.js",
            "lineno": 138,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000465",
                "name": "Identity#toMaybe",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Identity~Identity#toMaybe",
        "name": "toMaybe",
        "memberof": "module:Identity~Identity",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000048",
        "description": "<p>Change the Identity to a Some Maybe.</p>",
        "comment": "/**\n     * Change the Identity to a Some Maybe.\n     * @return {Maybe}\n     */"
    },
    {
        "comment": "/**\n * The maybe monad is a way to represent null values without being forced to check for their existence. Maybe is the identity monad but with an added condition. The maybe says \"I will only ever call map/flatmap if I am a Some. \"\n *\n *\n * ```\n * Some(5).map(ii => ii * 2) // Some(10)\n * None().map(ii => ii * 2) // None()\n * ```\n *\n * Maybe lets you declaratively write what should happen to data, but only excecutes if that data exists.\n *\n * ### Units\n * Some(value)\n * None()\n * Perhaps(value)\n * PerhapsIn(value, path)\n *\n * ### Examples\n * #### Unknown Deep Children\n * #### Don't Render without data\n * ####\n *\n * * [Some](#module:Maybe~Some)\n * * [None](#module:Maybe~None)\n * @module Maybe\n */",
        "meta": {
            "range": [
                320,
                1024
            ],
            "filename": "Maybe.js",
            "lineno": 17,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>The maybe monad is a way to represent null values without being forced to check for their existence. Maybe is the identity monad but with an added condition. The maybe says &quot;I will only ever call map/flatmap if I am a Some. &quot;</p>\n<pre class=\"prettyprint source\"><code>Some(5).map(ii => ii * 2) // Some(10)\nNone().map(ii => ii * 2) // None()</code></pre><p>Maybe lets you declaratively write what should happen to data, but only excecutes if that data exists.</p>\n<h3>Units</h3><p>Some(value)\nNone()\nPerhaps(value)\nPerhapsIn(value, path)</p>\n<h3>Examples</h3><h4>Unknown Deep Children</h4><h4>Don't Render without data</h4><p>####</p>\n<ul>\n<li><a href=\"#module:Maybe~Some\">Some</a></li>\n<li><a href=\"#module:Maybe~None\">None</a></li>\n</ul>",
        "kind": "module",
        "name": "Maybe",
        "longname": "module:Maybe",
        "___id": "T000002R000052",
        "___s": true
    },
    {
        "meta": {
            "range": [
                1049,
                2865
            ],
            "filename": "Maybe.js",
            "lineno": 47,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000562",
                "name": "Maybe",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isSome"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>The value to store</p>",
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<p>Whether or not the maybe is <code>some</code> or <code>none</code></p>",
                "name": "isSome"
            }
        ],
        "longname": "module:Maybe~Maybe",
        "classdesc": "<p>Maybe class</p>",
        "name": "Maybe",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000062",
        "description": "<p>Maybe constructor</p>",
        "comment": "/**\n * Maybe class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1445,
                1492
            ],
            "filename": "Maybe.js",
            "lineno": 66,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000583",
                "name": "Maybe#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Maybe~Maybe#unit",
        "name": "unit",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000066",
        "description": "<p>Unit function</p>",
        "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Some"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1645,
                1714
            ],
            "filename": "Maybe.js",
            "lineno": 76,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000592",
                "name": "Maybe#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>perform a flatMap if Some</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Maybe~Maybe#flatMap",
        "name": "flatMap",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000067",
        "description": "<p>Perform a flatMap on the current maybe</p>",
        "comment": "/**\n     * Perform a flatMap on the current maybe\n     *\n     * @param {Function} fn - perform a flatMap if Some\n     * @return {Some}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1798,
                1873
            ],
            "filename": "Maybe.js",
            "lineno": 85,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000608",
                "name": "Maybe#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Maybe~Maybe#map",
        "name": "map",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000068",
        "description": "<p>map</p>",
        "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Maybe}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2053,
                2146
            ],
            "filename": "Maybe.js",
            "lineno": 94,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000627",
                "name": "Maybe#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "<p>value that is Some</p>",
                "name": "defaultValue"
            }
        ],
        "longname": "module:Maybe~Maybe#value",
        "name": "value",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000069",
        "description": "<p>Return the maybe's value if it is 'some' or else return <code>defaultValue</code></p>",
        "comment": "/**\n     * Return the maybe's value if it is 'some' or else return `defaultValue`\n     * @param {*} [defaultValue = null] - value that is Some\n     * @return {*}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2303,
                2405
            ],
            "filename": "Maybe.js",
            "lineno": 103,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000645",
                "name": "Maybe#filter",
                "type": "MethodDefinition",
                "paramnames": [
                    "predicate"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "predicate"
            }
        ],
        "longname": "module:Maybe~Maybe#filter",
        "name": "filter",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000070",
        "description": "<p>Change the Maybe to a Some or None based on the result of a predicate</p>",
        "comment": "/**\n     * Change the Maybe to a Some or None based on the result of a predicate\n     * @param {Function} predicate\n     * @return {Maybe}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2678,
                2795
            ],
            "filename": "Maybe.js",
            "lineno": 115,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000668",
                "name": "Maybe#toEither",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>Value to place in the Left side</p>",
                "name": "leftValue"
            }
        ],
        "longname": "module:Maybe~Maybe~toEither",
        "name": "toEither",
        "memberof": "module:Maybe~Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000071",
        "description": "<p>Change the Maybe to an Either. If <code>Some</code> the value is placed in <code>Right</code>\nif <code>None</code> the value of <code>leftValue</code> is placed in a <code>Left</code>.</p>",
        "comment": "/**\n     * Change the Maybe to an Either. If `Some` the value is placed in `Right`\n     * if `None` the value of `leftValue` is placed in a `Left`.\n     *\n     * @inner\n     * @param {*} leftValue - Value to place in the Left side\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3170,
                3232
            ],
            "filename": "Maybe.js",
            "lineno": 140,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000723",
                "name": "Some",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [],
        "longname": "module:Maybe~Some",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: Some({\n        name: \"Derek Tibbs Jr\"\n    })\n});"
        ],
        "name": "Some",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000075",
        "description": "<p>Creates a new Maybe as 'Some' value</p>",
        "comment": "/**\n * Creates a new Maybe as 'Some' value\n * @return {Maybe}\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: Some({\n *         name: \"Derek Tibbs Jr\"\n *     })\n * });\n */"
    },
    {
        "meta": {
            "range": [
                3375,
                3432
            ],
            "filename": "Maybe.js",
            "lineno": 153,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000732",
                "name": "None",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "params": [],
        "longname": "module:Maybe~None",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: None()\n});"
        ],
        "name": "None",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000076",
        "description": "<p>Creates a new Maybe as 'None' value</p>",
        "comment": "/**\n * Creates a new Maybe as 'None' value\n *\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: None()\n * });\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3591,
                3667
            ],
            "filename": "Maybe.js",
            "lineno": 164,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000740",
                "name": "Perhaps",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Maybe~Perhaps",
        "examples": [
            "var person = Perhaps(possibleNullValue);"
        ],
        "name": "Perhaps",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000077",
        "description": "<p>Create a new Maybe where the value is uncertain.</p>",
        "comment": "/**\n * Create a new Maybe where the value is uncertain.\n * @param {any} value\n * @return {Maybe}\n * @example\n * var person = Perhaps(possibleNullValue);\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3883,
                4028
            ],
            "filename": "Maybe.js",
            "lineno": 176,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000754",
                "name": "PerhapsIn",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value",
                    "path"
                ]
            },
            "vars": {
                "deepValue": "module:Maybe~PerhapsIn~deepValue"
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "path"
            }
        ],
        "longname": "module:Maybe~PerhapsIn",
        "examples": [
            "var person = PerhapsIn({foo: {bar: possibleNullValue}}, ['foo', 'bar']);"
        ],
        "name": "PerhapsIn",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000078",
        "description": "<p>Create a new Maybe from a deep uncertain value.</p>",
        "comment": "/**\n * Create a new Maybe from a deep uncertain value.\n * @param {any} value\n * @param {string[]} path\n * @return {Maybe}\n * @example\n * var person = PerhapsIn({foo: {bar: possibleNullValue}}, ['foo', 'bar']);\n */"
    },
    {
        "comment": "/**\n * @module State\n */",
        "meta": {
            "range": [
                685,
                709
            ],
            "filename": "StateFunctor.js",
            "lineno": 28,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "kind": "module",
        "name": "State",
        "longname": "module:State",
        "___id": "T000002R000092",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "State"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                938,
                2608
            ],
            "filename": "StateFunctor.js",
            "lineno": 42,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000881",
                "name": "StateFunctor",
                "type": "MethodDefinition",
                "paramnames": [
                    "value",
                    "stateBooleans"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>The value to store</p>",
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<p>Whether or not the maybe is <code>some</code> or <code>none</code></p>",
                "name": "stateBooleans"
            }
        ],
        "longname": "module:State~StateFunctor.StateFunctor",
        "name": "StateFunctor",
        "memberof": "module:State~StateFunctor",
        "scope": "static",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000094",
        "description": "<p>State constructor</p>",
        "comment": "/**\n     * State constructor\n     *\n     * @param {*} value - The value to store\n     * @param {object} stateBooleans - Whether or not the maybe is `some` or `none`\n     * @return {State}\n     */"
    },
    {
        "meta": {
            "range": [
                3157,
                3892
            ],
            "filename": "StateFunctor.js",
            "lineno": 110,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "longname": "module:State~StateFunctor",
        "examples": [
            "StateFunctor(['Empty', 'Fetching', 'Refetching', 'Error', 'Success'])\n// {\n//      EmptyState: EmptyState,\n//      FetchingState: FetchingState,\n//      RefetchingState: RefetchingState,\n//      ErrorState: ErrorState,\n//      SuccessState: SuccessState\n// }\n\nStateFunctor(['New', 'Edit', 'View'])\n// {\n//      NewState: NewState,\n//      EditState: EditState,\n//      ViewState: ViewState\n// }"
        ],
        "name": "StateFunctor",
        "memberof": "module:State",
        "scope": "inner",
        "kind": "member",
        "___s": true,
        "___id": "T000002R000117",
        "description": "<p>Sometimes the state of your app can be represented through more than two states.\nThe StateMonadFactory lets you create a monad with an arbitary number of state.</p>\n<p>Given an array of names it will returns an on object of custom Unit functions.</p>",
        "comment": "/**\n * Sometimes the state of your app can be represented through more than two states.\n * The StateMonadFactory lets you create a monad with an arbitary number of state.\n *\n * Given an array of names it will returns an on object of custom Unit functions.\n *\n * @name StateFunctor\n * @example\n * StateFunctor(['Empty', 'Fetching', 'Refetching', 'Error', 'Success'])\n * // {\n * //      EmptyState: EmptyState,\n * //      FetchingState: FetchingState,\n * //      RefetchingState: RefetchingState,\n * //      ErrorState: ErrorState,\n * //      SuccessState: SuccessState\n * // }\n *\n * StateFunctor(['New', 'Edit', 'View'])\n * // {\n * //      NewState: NewState,\n * //      EditState: EditState,\n * //      ViewState: ViewState\n * // }\n */"
    },
    {
        "comment": "/**\n * Task lets you create a description of an action that is resolved via a callback.\n * It is useful for asynchronous operations. It can be thought of as a stricter more monadic version of a promise.\n *\n * @module Task\n */",
        "meta": {
            "range": [
                462,
                687
            ],
            "filename": "Task.js",
            "lineno": 21,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>Task lets you create a description of an action that is resolved via a callback.\nIt is useful for asynchronous operations. It can be thought of as a stricter more monadic version of a promise.</p>",
        "kind": "module",
        "name": "Task",
        "longname": "module:Task",
        "___id": "T000002R000123",
        "___s": true
    },
    {
        "meta": {
            "range": [
                711,
                3341
            ],
            "filename": "Task.js",
            "lineno": 31,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001263",
                "name": "Task",
                "type": "ClassDeclaration",
                "paramnames": [
                    "computation"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "TaskComputation"
                    ]
                },
                "description": "<p>a function given reject and resolve callback to call when appropriate</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Task~Task",
        "classdesc": "<p>Task class</p>",
        "name": "Task",
        "memberof": "module:Task",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000135",
        "description": "<p>Task constructor</p>",
        "comment": "/**\n * Task class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1185,
                1248
            ],
            "filename": "Task.js",
            "lineno": 50,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001283",
                "name": "Task#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "computation"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "TaskComputation"
                    ]
                },
                "description": "<p>a function given reject and resolve callback to call when appropriate</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Task~Task#unit",
        "name": "unit",
        "memberof": "module:Task~Task",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000139",
        "description": "<p>Unit function</p>",
        "comment": "/**\n     * Unit function\n     *\n     * @param {TaskComputation} fn - a function given reject and resolve callback to call when appropriate\n     * @return {Task}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1436,
                1609
            ],
            "filename": "Task.js",
            "lineno": 60,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001292",
                "name": "Task#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "TaskFlatMapper"
                    ]
                },
                "description": "<p>perform a flatMap</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Task~Task#flatMap",
        "name": "flatMap",
        "memberof": "module:Task~Task",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000140",
        "description": "<p>Perform a flatMap on the current value of the previous resolved computation</p>",
        "comment": "/**\n     * Perform a flatMap on the current value of the previous resolved computation\n     *\n     * @param {TaskFlatMapper} fn - perform a flatMap\n     * @return {Task}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1797,
                1975
            ],
            "filename": "Task.js",
            "lineno": 72,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001322",
                "name": "Task#leftFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "TaskFlatMapper"
                    ]
                },
                "description": "<p>perform a flatMap</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Task~Task#leftFlatMap",
        "name": "leftFlatMap",
        "memberof": "module:Task~Task",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000141",
        "description": "<p>Perform a flatMap on the current value of the previous rejected computation</p>",
        "comment": "/**\n     * Perform a flatMap on the current value of the previous rejected computation\n     *\n     * @param {TaskFlatMapper} fn - perform a flatMap\n     * @return {Task}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2141,
                2290
            ],
            "filename": "Task.js",
            "lineno": 84,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001352",
                "name": "Task#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "TaskMapper"
                    ]
                },
                "description": "<p>map</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Task~Task#map",
        "name": "map",
        "memberof": "module:Task~Task",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000142",
        "description": "<p>Perform a map on the current value of the previous resolved computation</p>",
        "comment": "/**\n     * Perform a map on the current value of the previous resolved computation\n     *\n     * @param {TaskMapper} fn - map\n     * @return {Task}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2456,
                2609
            ],
            "filename": "Task.js",
            "lineno": 96,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001379",
                "name": "Task#leftMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "TaskMapper"
                    ]
                },
                "description": "<p>map</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Task~Task#leftMap",
        "name": "leftMap",
        "memberof": "module:Task~Task",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000143",
        "description": "<p>Perform a map on the current value of the previous rejected computation</p>",
        "comment": "/**\n     * Perform a map on the current value of the previous rejected computation\n     *\n     * @param {TaskMapper} fn - map\n     * @return {Task}\n     */"
    },
    {
        "meta": {
            "range": [
                2676,
                3088
            ],
            "filename": "Task.js",
            "lineno": 105,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001406",
                "name": "Task#run",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Task~Task#run",
        "name": "run",
        "memberof": "module:Task~Task",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000144",
        "description": "<p>Run the the series of compututations.</p>",
        "comment": "/**\n     * Run the the series of compututations.\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3226,
                3339
            ],
            "filename": "Task.js",
            "lineno": 123,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001417",
                "name": "Task#toPromise",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Task~Task#toPromise",
        "name": "toPromise",
        "memberof": "module:Task~Task",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000145",
        "description": "<p>Run the computation and return the state as either a rejected or resolved promise.</p>",
        "comment": "/**\n     * Run the computation and return the state as either a rejected or resolved promise.\n     * @returns {Promise}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3536,
                3607
            ],
            "filename": "Task.js",
            "lineno": 134,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001441",
                "name": "TaskFactory",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "computation"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "TaskComputation"
                    ]
                },
                "name": "computation"
            }
        ],
        "longname": "module:Task~TaskFactory",
        "name": "TaskFactory",
        "memberof": "module:Task",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000147",
        "description": "<p>Create a new Task</p>",
        "comment": "/**\n                      * Create a new Task\n                      * @param {TaskComputation} computation\n                      * @return {Task}\n                      */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3687,
                3767
            ],
            "filename": "Task.js",
            "lineno": 143,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001449",
                "name": "Resolve",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Task~Resolve",
        "name": "Resolve",
        "memberof": "module:Task",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000148",
        "description": "<p>Create a new resolved Task</p>",
        "comment": "/**\n * Create a new resolved Task\n * @param {any} value\n * @return {Task}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3847,
                3919
            ],
            "filename": "Task.js",
            "lineno": 152,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001462",
                "name": "Reject",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Task~Reject",
        "name": "Reject",
        "memberof": "module:Task",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000149",
        "description": "<p>Create a new rejected Task</p>",
        "comment": "/**\n * Create a new rejected Task\n * @param {any} value\n * @return {Task}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Task"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                4030,
                4128
            ],
            "filename": "Task.js",
            "lineno": 161,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100001474",
                "name": "TaskPromise",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Task~TaskPromise",
        "name": "TaskPromise",
        "memberof": "module:Task",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000150",
        "description": "<p>Create a new Task from a function that returns a promise.</p>",
        "comment": "/**\n * Create a new Task from a function that returns a promise.\n * @param {any} value\n * @return {Task}\n */"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/allanhortle/localhost/code/fronads/src/Either.js",
            "/Users/allanhortle/localhost/code/fronads/src/Identity.js",
            "/Users/allanhortle/localhost/code/fronads/src/Maybe.js",
            "/Users/allanhortle/localhost/code/fronads/src/StateFunctor.js",
            "/Users/allanhortle/localhost/code/fronads/src/Task.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Either-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Identity-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Maybe-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/StateFunctor-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Task-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/definitions.js",
            "/Users/allanhortle/localhost/code/fronads/src/index.js",
            "/Users/allanhortle/localhost/code/fronads/src/util/Data.js"
        ],
        "___id": "T000002R000268",
        "___s": true
    }
]