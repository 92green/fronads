[
    {
        "comment": "/**\n * Either is monad that can hold a value of type `Left` or `Right`, but never at the same time.\n * @module Either\n */",
        "meta": {
            "range": [
                180,
                301
            ],
            "filename": "Either.js",
            "lineno": 12,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>Either is monad that can hold a value of type <code>Left</code> or <code>Right</code>, but never at the same time.</p>",
        "kind": "module",
        "name": "Either",
        "longname": "module:Either",
        "___id": "T000002R000002",
        "___s": true
    },
    {
        "meta": {
            "range": [
                327,
                1897
            ],
            "filename": "Either.js",
            "lineno": 20,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000037",
                "name": "Either",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isRight"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isRight"
            }
        ],
        "longname": "module:Either~Either",
        "classdesc": "<p>Either class</p>",
        "name": "Either",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000008",
        "comment": "/**\n * Either class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                630,
                678
            ],
            "filename": "Either.js",
            "lineno": 36,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000058",
                "name": "Either#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Either#unit",
        "name": "unit",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000012",
        "description": "<p>Unit function</p>",
        "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                767,
                837
            ],
            "filename": "Either.js",
            "lineno": 45,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000067",
                "name": "Either#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#flatMap",
        "name": "flatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000013",
        "description": "<p>flatMap</p>",
        "comment": "/**\n     * flatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                922,
                997
            ],
            "filename": "Either.js",
            "lineno": 54,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000083",
                "name": "Either#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#map",
        "name": "map",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000014",
        "description": "<p>map</p>",
        "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1090,
                1164
            ],
            "filename": "Either.js",
            "lineno": 63,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000102",
                "name": "Either#leftFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftFlatMap",
        "name": "leftFlatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000015",
        "description": "<p>leftFlatMap</p>",
        "comment": "/**\n     * leftFlatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1253,
                1331
            ],
            "filename": "Either.js",
            "lineno": 72,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000118",
                "name": "Either#leftMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftMap",
        "name": "leftMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000016",
        "description": "<p>leftMap</p>",
        "comment": "/**\n     * leftMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1423,
                1522
            ],
            "filename": "Either.js",
            "lineno": 81,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000135",
                "name": "Either#ap",
                "type": "MethodDefinition",
                "paramnames": [
                    "eitherWithFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                },
                "name": "eitherWithFn"
            }
        ],
        "longname": "module:Either~Either#ap",
        "name": "ap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000017",
        "description": "<p>ap</p>",
        "comment": "/**\n     * ap\n     * @param {Either} eitherWithFn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1642,
                1739
            ],
            "filename": "Either.js",
            "lineno": 91,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000157",
                "name": "Either#cata",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftFn",
                    "rightFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "leftFn"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "rightFn"
            }
        ],
        "longname": "module:Either~Either#cata",
        "name": "cata",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000018",
        "description": "<p>cata</p>",
        "comment": "/**\n     * cata\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {any}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1799,
                1895
            ],
            "filename": "Either.js",
            "lineno": 99,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000178",
                "name": "Either#toMaybe",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#toMaybe",
        "name": "toMaybe",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000019",
        "description": "<p>toMaybe</p>",
        "comment": "/**\n     * toMaybe\n     * @return {Maybe}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2117,
                2178
            ],
            "filename": "Either.js",
            "lineno": 110,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000208",
                "name": "Right",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Right",
        "name": "Right",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000021",
        "description": "<p>Create an Either as a Right value</p>",
        "comment": "/**\n                           * Create an Either as a Right value\n                           * @param {any} value\n                           * @return {Either}\n                           */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2266,
                2327
            ],
            "filename": "Either.js",
            "lineno": 119,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000217",
                "name": "Left",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Left",
        "name": "Left",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000022",
        "description": "<p>Create an Either as a Left value</p>",
        "comment": "/**\n * Create an Either as a Left value\n * @param {any} value\n * @return {Either}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2550,
                2673
            ],
            "filename": "Either.js",
            "lineno": 130,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000226",
                "name": "Try",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "func"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "func"
            }
        ],
        "longname": "module:Either~Try",
        "name": "Try",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000023",
        "description": "<p>Create a Try Either. <code>func</code> is immediately exceuted,\nif an error is thrown the Either will be Left(error) otherwise\nthe value of <code>func</code> is passed to a Right.</p>",
        "comment": "/**\n * Create a Try Either. `func` is immediately exceuted,\n * if an error is thrown the Either will be Left(error) otherwise\n * the value of `func` is passed to a Right.\n * @param {Function} func\n * @return {Either}\n */"
    },
    {
        "comment": "/**\n * Maybe is a way to represent null values. It is either `Some` or it is `None`.\n * * [Some](#module:Maybe~Some)\n * * [None](#module:Maybe~None)\n * @module Maybe\n */",
        "meta": {
            "range": [
                305,
                474
            ],
            "filename": "Maybe.js",
            "lineno": 15,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>Maybe is a way to represent null values. It is either <code>Some</code> or it is <code>None</code>.</p>\n<ul>\n<li><a href=\"#module:Maybe~Some\">Some</a></li>\n<li><a href=\"#module:Maybe~None\">None</a></li>\n</ul>",
        "kind": "module",
        "name": "Maybe",
        "longname": "module:Maybe",
        "___id": "T000002R000024",
        "___s": true
    },
    {
        "meta": {
            "range": [
                499,
                1943
            ],
            "filename": "Maybe.js",
            "lineno": 25,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000296",
                "name": "Maybe",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isSome"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>The value to store</p>",
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<p>Whether or not the maybe is <code>some</code> or <code>none</code></p>",
                "name": "isSome"
            }
        ],
        "longname": "module:Maybe~Maybe",
        "classdesc": "<p>Maybe class</p>",
        "name": "Maybe",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000032",
        "description": "<p>Maybe constructor</p>",
        "comment": "/**\n * Maybe class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                937,
                978
            ],
            "filename": "Maybe.js",
            "lineno": 47,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000332",
                "name": "Maybe#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Maybe~Maybe#unit",
        "name": "unit",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000037",
        "description": "<p>Unit function</p>",
        "comment": "/**\n   * Unit function\n   * @param {any} value\n   * @return {Either}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Some"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1117,
                1180
            ],
            "filename": "Maybe.js",
            "lineno": 57,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000341",
                "name": "Maybe#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>perform a flatMap if Some</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Maybe~Maybe#flatMap",
        "name": "flatMap",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000038",
        "description": "<p>Perform a flatMap on the current maybe</p>",
        "comment": "/**\n   * Perform a flatMap on the current maybe\n   *\n   * @param {Function} fn - perform a flatMap if Some\n   * @return {Some}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1252,
                1321
            ],
            "filename": "Maybe.js",
            "lineno": 66,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000357",
                "name": "Maybe#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Maybe~Maybe#map",
        "name": "map",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000039",
        "description": "<p>map</p>",
        "comment": "/**\n   * map\n   * @param {Function} fn\n   * @return {Maybe}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1489,
                1576
            ],
            "filename": "Maybe.js",
            "lineno": 75,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000376",
                "name": "Maybe#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "<p>value that is Some</p>",
                "name": "defaultValue"
            }
        ],
        "longname": "module:Maybe~Maybe#value",
        "name": "value",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000040",
        "description": "<p>Return the maybe's value if it is 'some' or else return <code>defaultValue</code></p>",
        "comment": "/**\n   * Return the maybe's value if it is 'some' or else return `defaultValue`\n   * @param {*} [defaultValue = null] - value that is Some\n   * @return {*}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1830,
                1941
            ],
            "filename": "Maybe.js",
            "lineno": 87,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000394",
                "name": "Maybe#toEither",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>Value to place in the Left side</p>",
                "name": "leftValue"
            }
        ],
        "longname": "module:Maybe~Maybe~toEither",
        "name": "toEither",
        "memberof": "module:Maybe~Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000041",
        "description": "<p>Change the Maybe to an Either. If <code>Some</code> the value is placed in <code>Right</code>\nif <code>None</code> the value of <code>leftValue</code> is placed in a <code>Left</code></p>",
        "comment": "/**\n   * Change the Maybe to an Either. If `Some` the value is placed in `Right`\n   * if `None` the value of `leftValue` is placed in a `Left`\n   *\n   * @inner\n   * @param {*} leftValue - Value to place in the Left side\n   * @return {Either}\n   */"
    },
    {
        "meta": {
            "range": [
                2378,
                2435
            ],
            "filename": "Maybe.js",
            "lineno": 103,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000426",
                "name": "Some",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [],
        "longname": "module:Maybe~Some",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: Some({\n        name: \"Derek Tibbs Jr\"\n    })\n});"
        ],
        "name": "Some",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000043",
        "description": "<p>Creates a new Maybe as 'Some' value</p>",
        "comment": "/**\n                          * Creates a new Maybe as 'Some' value\n                          * @example\n                          * var person = Some({\n                          *     name: \"Derek Tibbs\",\n                          *     child: Some({\n                          *         name: \"Derek Tibbs Jr\"\n                          *     })\n                          * });\n                          */"
    },
    {
        "meta": {
            "range": [
                2578,
                2630
            ],
            "filename": "Maybe.js",
            "lineno": 116,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000435",
                "name": "None",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "params": [],
        "longname": "module:Maybe~None",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: None()\n});"
        ],
        "name": "None",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000044",
        "description": "<p>Creates a new Maybe as 'None' value</p>",
        "comment": "/**\n * Creates a new Maybe as 'None' value\n *\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: None()\n * });\n */"
    },
    {
        "comment": "/**\n * RequestState is used to hold the four part relationship of an asynchronous request.\n * It is like a four way version of an Either. Instead of Left and Right the RequestState\n * can be either be empty, fetching, an error or a success. These states are represented through the identites:\n * * [RequestEmpty](#module:RequestState~RequestEmpty)\n * * [RequestFetching](#module:RequestState~RequestFetching)\n * * [RequestError](#module:RequestState~RequestError)\n * * [RequestSuccess](#module:RequestState~RequestSuccess)\n *\n * @module RequestState\n */",
        "meta": {
            "range": [
                240,
                793
            ],
            "filename": "RequestState.js",
            "lineno": 12,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>RequestState is used to hold the four part relationship of an asynchronous request.\nIt is like a four way version of an Either. Instead of Left and Right the RequestState\ncan be either be empty, fetching, an error or a success. These states are represented through the identites:</p>\n<ul>\n<li><a href=\"#module:RequestState~RequestEmpty\">RequestEmpty</a></li>\n<li><a href=\"#module:RequestState~RequestFetching\">RequestFetching</a></li>\n<li><a href=\"#module:RequestState~RequestError\">RequestError</a></li>\n<li><a href=\"#module:RequestState~RequestSuccess\">RequestSuccess</a></li>\n</ul>",
        "kind": "module",
        "name": "RequestState",
        "longname": "module:RequestState",
        "___id": "T000002R000045",
        "___s": true
    },
    {
        "meta": {
            "range": [
                825,
                2726
            ],
            "filename": "RequestState.js",
            "lineno": 27,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000480",
                "name": "RequestState",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isFetching",
                    "isError",
                    "isSuccess"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isFetching"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isError"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isSuccess"
            }
        ],
        "longname": "module:RequestState~RequestState",
        "classdesc": "<p>RequestState class</p>",
        "name": "RequestState",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000051",
        "comment": "/**\n * RequestState class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1253,
                1331
            ],
            "filename": "RequestState.js",
            "lineno": 47,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000515",
                "name": "RequestState#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#map",
        "name": "map",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000057",
        "description": "<p>map</p>",
        "comment": "/**\n   * map\n   * @param {any} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1405,
                1471
            ],
            "filename": "RequestState.js",
            "lineno": 56,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000533",
                "name": "RequestState#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#flatMap",
        "name": "flatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000058",
        "description": "<p>flatMap</p>",
        "comment": "/**\n   * flatMap\n   * @param {Function} fn\n   * @return {any}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1558,
                1646
            ],
            "filename": "RequestState.js",
            "lineno": 65,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000549",
                "name": "RequestState#fetchingMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#fetchingMap",
        "name": "fetchingMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000059",
        "description": "<p>fetchingMap</p>",
        "comment": "/**\n   * fetchingMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1737,
                1812
            ],
            "filename": "RequestState.js",
            "lineno": 74,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000567",
                "name": "RequestState#fetchingFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#fetchingFlatMap",
        "name": "fetchingFlatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000060",
        "description": "<p>fetchingFlatMap</p>",
        "comment": "/**\n   * fetchingFlatMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1896,
                1975
            ],
            "filename": "RequestState.js",
            "lineno": 83,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000583",
                "name": "RequestState#errorMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#errorMap",
        "name": "errorMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000061",
        "description": "<p>errorMap</p>",
        "comment": "/**\n   * errorMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2063,
                2132
            ],
            "filename": "RequestState.js",
            "lineno": 92,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000601",
                "name": "RequestState#errorFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#errorFlatMap",
        "name": "errorFlatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000062",
        "description": "<p>errorFlatMap</p>",
        "comment": "/**\n   * errorFlatMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2192,
                2248
            ],
            "filename": "RequestState.js",
            "lineno": 100,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000617",
                "name": "RequestState#toFetching",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toFetching",
        "name": "toFetching",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000063",
        "description": "<p>toFetching</p>",
        "comment": "/**\n   * toFetching\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2305,
                2355
            ],
            "filename": "RequestState.js",
            "lineno": 108,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000627",
                "name": "RequestState#toError",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toError",
        "name": "toError",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000064",
        "description": "<p>toError</p>",
        "comment": "/**\n   * toError\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2414,
                2468
            ],
            "filename": "RequestState.js",
            "lineno": 116,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000637",
                "name": "RequestState#toSuccess",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toSuccess",
        "name": "toSuccess",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000065",
        "description": "<p>toSuccess</p>",
        "comment": "/**\n   * toSuccess\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2525,
                2567
            ],
            "filename": "RequestState.js",
            "lineno": 124,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000647",
                "name": "RequestState#toEmpty",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toEmpty",
        "name": "toEmpty",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000066",
        "description": "<p>toEmpty</p>",
        "comment": "/**\n   * toEmpty\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2644,
                2724
            ],
            "filename": "RequestState.js",
            "lineno": 133,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000654",
                "name": "RequestState#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "defaultValue"
            }
        ],
        "longname": "module:RequestState~RequestState#value",
        "name": "value",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000067",
        "description": "<p>value</p>",
        "comment": "/**\n   * value\n   * @param {any} defaultValue\n   * @return {any}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2995,
                3076
            ],
            "filename": "RequestState.js",
            "lineno": 144,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000676",
                "name": "RequestEmpty",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestEmpty",
        "name": "RequestEmpty",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000069",
        "description": "<p>Create an RequestState as a RequestEmpty value</p>",
        "comment": "/**\n                                 * Create an RequestState as a RequestEmpty value\n                                 * @param {any} value\n                                 * @return {RequestState}\n                                 */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3186,
                3275
            ],
            "filename": "RequestState.js",
            "lineno": 153,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000686",
                "name": "RequestFetching",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestFetching",
        "name": "RequestFetching",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000070",
        "description": "<p>Create a RequestState as a RequestFetching value</p>",
        "comment": "/**\n * Create a RequestState as a RequestFetching value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3382,
                3468
            ],
            "filename": "RequestState.js",
            "lineno": 162,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000697",
                "name": "RequestError",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestError",
        "name": "RequestError",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000071",
        "description": "<p>Create a RequestState as a RequestError value</p>",
        "comment": "/**\n * Create a RequestState as a RequestError value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3577,
                3665
            ],
            "filename": "RequestState.js",
            "lineno": 171,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000708",
                "name": "RequestSuccess",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestSuccess",
        "name": "RequestSuccess",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000072",
        "description": "<p>Create a RequestState as a RequestSuccess value</p>",
        "comment": "/**\n * Create a RequestState as a RequestSuccess value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/allanhortle/localhost/code/fronads/src/Either.js",
            "/Users/allanhortle/localhost/code/fronads/src/Maybe.js",
            "/Users/allanhortle/localhost/code/fronads/src/RequestState.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Either-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Maybe-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/RequestState-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/index.js"
        ],
        "___id": "T000002R000131",
        "___s": true
    }
]