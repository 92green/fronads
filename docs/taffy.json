[
    {
        "comment": "/**\n * Either is monad that can hold a value of type `Left` or `Right`, but never at the same time.\n * @module Either\n */",
        "meta": {
            "range": [
                219,
                340
            ],
            "filename": "Either.js",
            "lineno": 13,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>Either is monad that can hold a value of type <code>Left</code> or <code>Right</code>, but never at the same time.</p>",
        "kind": "module",
        "name": "Either",
        "longname": "module:Either",
        "___id": "T000002R000008",
        "___s": true
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                460,
                553
            ],
            "filename": "Either.js",
            "lineno": 25,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000046",
                "name": "Either",
                "type": "MethodDefinition",
                "paramnames": [
                    "value",
                    "isRight"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isRight"
            }
        ],
        "longname": "module:Either~Either.Either",
        "name": "Either",
        "memberof": "module:Either~Either",
        "scope": "static",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000010",
        "comment": "/**\n     * @param {any} value\n     * @param {boolean} isRight\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                646,
                694
            ],
            "filename": "Either.js",
            "lineno": 35,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000064",
                "name": "Either#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Either#unit",
        "name": "unit",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000013",
        "description": "<p>Unit function</p>",
        "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                783,
                853
            ],
            "filename": "Either.js",
            "lineno": 44,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000073",
                "name": "Either#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#flatMap",
        "name": "flatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000014",
        "description": "<p>flatMap</p>",
        "comment": "/**\n     * flatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                938,
                1013
            ],
            "filename": "Either.js",
            "lineno": 53,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000089",
                "name": "Either#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#map",
        "name": "map",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000015",
        "description": "<p>map</p>",
        "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1106,
                1180
            ],
            "filename": "Either.js",
            "lineno": 62,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000108",
                "name": "Either#leftFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftFlatMap",
        "name": "leftFlatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000016",
        "description": "<p>leftFlatMap</p>",
        "comment": "/**\n     * leftFlatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1269,
                1347
            ],
            "filename": "Either.js",
            "lineno": 71,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000124",
                "name": "Either#leftMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Either~Either#leftMap",
        "name": "leftMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000017",
        "description": "<p>leftMap</p>",
        "comment": "/**\n     * leftMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1439,
                1538
            ],
            "filename": "Either.js",
            "lineno": 80,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000141",
                "name": "Either#ap",
                "type": "MethodDefinition",
                "paramnames": [
                    "eitherWithFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                },
                "name": "eitherWithFn"
            }
        ],
        "longname": "module:Either~Either#ap",
        "name": "ap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000018",
        "description": "<p>ap</p>",
        "comment": "/**\n     * ap\n     * @param {Either} eitherWithFn\n     * @return {Either}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1703,
                1805
            ],
            "filename": "Either.js",
            "lineno": 90,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000163",
                "name": "Either#biMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftFn",
                    "rightFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "leftFn"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "rightFn"
            }
        ],
        "longname": "module:Either~Either#biMap",
        "name": "biMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000019",
        "description": "<p>Provide functions to map both sides of the Either</p>",
        "comment": "/**\n     * Provide functions to map both sides of the Either\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {any}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1930,
                2032
            ],
            "filename": "Either.js",
            "lineno": 100,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000184",
                "name": "Either#biFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftFn",
                    "rightFn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "leftFn"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "rightFn"
            }
        ],
        "longname": "module:Either~Either#biFlatMap",
        "name": "biFlatMap",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000020",
        "description": "<p>biFlatMap</p>",
        "comment": "/**\n     * biFlatMap\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {any}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2108,
                2148
            ],
            "filename": "Either.js",
            "lineno": 108,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000205",
                "name": "Either#value",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#value",
        "name": "value",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000021",
        "description": "<p>Return the current value.</p>",
        "comment": "/**\n     * Return the current value.\n     * @return {any}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2208,
                2304
            ],
            "filename": "Either.js",
            "lineno": 116,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000213",
                "name": "Either#toMaybe",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:Either~Either#toMaybe",
        "name": "toMaybe",
        "memberof": "module:Either~Either",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000022",
        "description": "<p>toMaybe</p>",
        "comment": "/**\n     * toMaybe\n     * @return {Maybe}\n     */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2397,
                2458
            ],
            "filename": "Either.js",
            "lineno": 128,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000237",
                "name": "Right",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Right",
        "name": "Right",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000023",
        "description": "<p>Create an Either as a Right value</p>",
        "comment": "/**\n * Create an Either as a Right value\n * @param {any} value\n * @return {Either}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2546,
                2607
            ],
            "filename": "Either.js",
            "lineno": 137,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000246",
                "name": "Left",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Either~Left",
        "name": "Left",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000024",
        "description": "<p>Create an Either as a Left value</p>",
        "comment": "/**\n * Create an Either as a Left value\n * @param {any} value\n * @return {Either}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2830,
                2953
            ],
            "filename": "Either.js",
            "lineno": 148,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000255",
                "name": "Try",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "func"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "func"
            }
        ],
        "longname": "module:Either~Try",
        "name": "Try",
        "memberof": "module:Either",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000025",
        "description": "<p>Create a Try Either. <code>func</code> is immediately exceuted,\nif an error is thrown the Either will be Left(error) otherwise\nthe value of <code>func</code> is passed to a Right.</p>",
        "comment": "/**\n * Create a Try Either. `func` is immediately exceuted,\n * if an error is thrown the Either will be Left(error) otherwise\n * the value of `func` is passed to a Right.\n * @param {Function} func\n * @return {Either}\n */"
    },
    {
        "comment": "/**\n * Maybe is a way to represent null values. It is either `Some` or it is `None`.\n * * [Some](#module:Maybe~Some)\n * * [None](#module:Maybe~None)\n * @module Maybe\n */",
        "meta": {
            "range": [
                369,
                538
            ],
            "filename": "Maybe.js",
            "lineno": 17,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>Maybe is a way to represent null values. It is either <code>Some</code> or it is <code>None</code>.</p>\n<ul>\n<li><a href=\"#module:Maybe~Some\">Some</a></li>\n<li><a href=\"#module:Maybe~None\">None</a></li>\n</ul>",
        "kind": "module",
        "name": "Maybe",
        "longname": "module:Maybe",
        "___id": "T000002R000027",
        "___s": true
    },
    {
        "meta": {
            "range": [
                563,
                1927
            ],
            "filename": "Maybe.js",
            "lineno": 27,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000347",
                "name": "Maybe",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isSome"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>The value to store</p>",
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<p>Whether or not the maybe is <code>some</code> or <code>none</code></p>",
                "name": "isSome"
            }
        ],
        "longname": "module:Maybe~Maybe",
        "classdesc": "<p>Maybe class</p>",
        "name": "Maybe",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000037",
        "description": "<p>Maybe constructor</p>",
        "comment": "/**\n * Maybe class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                921,
                962
            ],
            "filename": "Maybe.js",
            "lineno": 46,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000368",
                "name": "Maybe#unit",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:Maybe~Maybe#unit",
        "name": "unit",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000041",
        "description": "<p>Unit function</p>",
        "comment": "/**\n   * Unit function\n   * @param {any} value\n   * @return {Either}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Some"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1101,
                1164
            ],
            "filename": "Maybe.js",
            "lineno": 56,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000377",
                "name": "Maybe#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "<p>perform a flatMap if Some</p>",
                "name": "fn"
            }
        ],
        "longname": "module:Maybe~Maybe#flatMap",
        "name": "flatMap",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000042",
        "description": "<p>Perform a flatMap on the current maybe</p>",
        "comment": "/**\n   * Perform a flatMap on the current maybe\n   *\n   * @param {Function} fn - perform a flatMap if Some\n   * @return {Some}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Maybe"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1236,
                1305
            ],
            "filename": "Maybe.js",
            "lineno": 65,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000393",
                "name": "Maybe#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:Maybe~Maybe#map",
        "name": "map",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000043",
        "description": "<p>map</p>",
        "comment": "/**\n   * map\n   * @param {Function} fn\n   * @return {Maybe}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1473,
                1560
            ],
            "filename": "Maybe.js",
            "lineno": 74,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000412",
                "name": "Maybe#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "<p>value that is Some</p>",
                "name": "defaultValue"
            }
        ],
        "longname": "module:Maybe~Maybe#value",
        "name": "value",
        "memberof": "module:Maybe~Maybe",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000044",
        "description": "<p>Return the maybe's value if it is 'some' or else return <code>defaultValue</code></p>",
        "comment": "/**\n   * Return the maybe's value if it is 'some' or else return `defaultValue`\n   * @param {*} [defaultValue = null] - value that is Some\n   * @return {*}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "Either"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1814,
                1925
            ],
            "filename": "Maybe.js",
            "lineno": 86,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000430",
                "name": "Maybe#toEither",
                "type": "MethodDefinition",
                "paramnames": [
                    "leftValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "description": "<p>Value to place in the Left side</p>",
                "name": "leftValue"
            }
        ],
        "longname": "module:Maybe~Maybe~toEither",
        "name": "toEither",
        "memberof": "module:Maybe~Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000045",
        "description": "<p>Change the Maybe to an Either. If <code>Some</code> the value is placed in <code>Right</code>\nif <code>None</code> the value of <code>leftValue</code> is placed in a <code>Left</code></p>",
        "comment": "/**\n   * Change the Maybe to an Either. If `Some` the value is placed in `Right`\n   * if `None` the value of `leftValue` is placed in a `Left`\n   *\n   * @inner\n   * @param {*} leftValue - Value to place in the Left side\n   * @return {Either}\n   */"
    },
    {
        "meta": {
            "range": [
                2113,
                2170
            ],
            "filename": "Maybe.js",
            "lineno": 103,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000456",
                "name": "Some",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [],
        "longname": "module:Maybe~Some",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: Some({\n        name: \"Derek Tibbs Jr\"\n    })\n});"
        ],
        "name": "Some",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000046",
        "description": "<p>Creates a new Maybe as 'Some' value</p>",
        "comment": "/**\n * Creates a new Maybe as 'Some' value\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: Some({\n *         name: \"Derek Tibbs Jr\"\n *     })\n * });\n */"
    },
    {
        "meta": {
            "range": [
                2313,
                2365
            ],
            "filename": "Maybe.js",
            "lineno": 116,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000465",
                "name": "None",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "params": [],
        "longname": "module:Maybe~None",
        "examples": [
            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: None()\n});"
        ],
        "name": "None",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000047",
        "description": "<p>Creates a new Maybe as 'None' value</p>",
        "comment": "/**\n * Creates a new Maybe as 'None' value\n *\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: None()\n * });\n */"
    },
    {
        "meta": {
            "range": [
                2486,
                2560
            ],
            "filename": "Maybe.js",
            "lineno": 126,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000473",
                "name": "Perhaps",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [],
        "longname": "module:Maybe~Perhaps",
        "examples": [
            "var person = Perhaps(possibleNullValue);"
        ],
        "name": "Perhaps",
        "memberof": "module:Maybe",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000048",
        "description": "<p>Create a new Maybe where the value is uncertain.</p>",
        "comment": "/**\n * Create a new Maybe where the value is uncertain.\n *\n * @example\n * var person = Perhaps(possibleNullValue);\n */"
    },
    {
        "comment": "/**\n * RequestState is used to hold the four part relationship of an asynchronous request.\n * It is like a four way version of an Either. Instead of Left and Right the RequestState\n * can be either be empty, fetching, an error or a success. These states are represented through the identites:\n * * [RequestEmpty](#module:RequestState~RequestEmpty)\n * * [RequestFetching](#module:RequestState~RequestFetching)\n * * [RequestError](#module:RequestState~RequestError)\n * * [RequestSuccess](#module:RequestState~RequestSuccess)\n *\n * @module RequestState\n */",
        "meta": {
            "range": [
                291,
                844
            ],
            "filename": "RequestState.js",
            "lineno": 13,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {}
        },
        "description": "<p>RequestState is used to hold the four part relationship of an asynchronous request.\nIt is like a four way version of an Either. Instead of Left and Right the RequestState\ncan be either be empty, fetching, an error or a success. These states are represented through the identites:</p>\n<ul>\n<li><a href=\"#module:RequestState~RequestEmpty\">RequestEmpty</a></li>\n<li><a href=\"#module:RequestState~RequestFetching\">RequestFetching</a></li>\n<li><a href=\"#module:RequestState~RequestError\">RequestError</a></li>\n<li><a href=\"#module:RequestState~RequestSuccess\">RequestSuccess</a></li>\n</ul>",
        "kind": "module",
        "name": "RequestState",
        "longname": "module:RequestState",
        "___id": "T000002R000050",
        "___s": true
    },
    {
        "meta": {
            "range": [
                876,
                2797
            ],
            "filename": "RequestState.js",
            "lineno": 28,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000540",
                "name": "RequestState",
                "type": "ClassDeclaration",
                "paramnames": [
                    "value",
                    "isFetching",
                    "isError",
                    "isSuccess"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isFetching"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isError"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isSuccess"
            }
        ],
        "longname": "module:RequestState~RequestState",
        "classdesc": "<p>RequestState class</p>",
        "name": "RequestState",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "class",
        "___s": true,
        "___id": "T000002R000057",
        "comment": "/**\n * RequestState class\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1324,
                1402
            ],
            "filename": "RequestState.js",
            "lineno": 49,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000575",
                "name": "RequestState#map",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#map",
        "name": "map",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000063",
        "description": "<p>map</p>",
        "comment": "/**\n   * map\n   * @param {any} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1476,
                1542
            ],
            "filename": "RequestState.js",
            "lineno": 58,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000593",
                "name": "RequestState#flatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#flatMap",
        "name": "flatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000064",
        "description": "<p>flatMap</p>",
        "comment": "/**\n   * flatMap\n   * @param {Function} fn\n   * @return {any}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1629,
                1717
            ],
            "filename": "RequestState.js",
            "lineno": 67,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000609",
                "name": "RequestState#fetchingMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#fetchingMap",
        "name": "fetchingMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000065",
        "description": "<p>fetchingMap</p>",
        "comment": "/**\n   * fetchingMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1808,
                1883
            ],
            "filename": "RequestState.js",
            "lineno": 76,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000627",
                "name": "RequestState#fetchingFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#fetchingFlatMap",
        "name": "fetchingFlatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000066",
        "description": "<p>fetchingFlatMap</p>",
        "comment": "/**\n   * fetchingFlatMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                1967,
                2046
            ],
            "filename": "RequestState.js",
            "lineno": 85,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000643",
                "name": "RequestState#errorMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#errorMap",
        "name": "errorMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000067",
        "description": "<p>errorMap</p>",
        "comment": "/**\n   * errorMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2134,
                2203
            ],
            "filename": "RequestState.js",
            "lineno": 94,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000661",
                "name": "RequestState#errorFlatMap",
                "type": "MethodDefinition",
                "paramnames": [
                    "fn"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "fn"
            }
        ],
        "longname": "module:RequestState~RequestState#errorFlatMap",
        "name": "errorFlatMap",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000068",
        "description": "<p>errorFlatMap</p>",
        "comment": "/**\n   * errorFlatMap\n   * @param {Function} fn\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2263,
                2319
            ],
            "filename": "RequestState.js",
            "lineno": 102,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000677",
                "name": "RequestState#toFetching",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toFetching",
        "name": "toFetching",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000069",
        "description": "<p>toFetching</p>",
        "comment": "/**\n   * toFetching\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2376,
                2426
            ],
            "filename": "RequestState.js",
            "lineno": 110,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000687",
                "name": "RequestState#toError",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toError",
        "name": "toError",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000070",
        "description": "<p>toError</p>",
        "comment": "/**\n   * toError\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2485,
                2539
            ],
            "filename": "RequestState.js",
            "lineno": 118,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000697",
                "name": "RequestState#toSuccess",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toSuccess",
        "name": "toSuccess",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000071",
        "description": "<p>toSuccess</p>",
        "comment": "/**\n   * toSuccess\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2596,
                2638
            ],
            "filename": "RequestState.js",
            "lineno": 126,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000707",
                "name": "RequestState#toEmpty",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "params": [],
        "longname": "module:RequestState~RequestState#toEmpty",
        "name": "toEmpty",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000072",
        "description": "<p>toEmpty</p>",
        "comment": "/**\n   * toEmpty\n   * @return {RequestState}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                2715,
                2795
            ],
            "filename": "RequestState.js",
            "lineno": 135,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000714",
                "name": "RequestState#value",
                "type": "MethodDefinition",
                "paramnames": [
                    "defaultValue"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "defaultValue"
            }
        ],
        "longname": "module:RequestState~RequestState#value",
        "name": "value",
        "memberof": "module:RequestState~RequestState",
        "scope": "instance",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000073",
        "description": "<p>value</p>",
        "comment": "/**\n   * value\n   * @param {any} defaultValue\n   * @return {any}\n   */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3066,
                3147
            ],
            "filename": "RequestState.js",
            "lineno": 146,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000736",
                "name": "RequestEmpty",
                "type": "FunctionDeclaration",
                "paramnames": []
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestEmpty",
        "name": "RequestEmpty",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000075",
        "description": "<p>Create an RequestState as a RequestEmpty value</p>",
        "comment": "/**\n                                 * Create an RequestState as a RequestEmpty value\n                                 * @param {any} value\n                                 * @return {RequestState}\n                                 */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3257,
                3346
            ],
            "filename": "RequestState.js",
            "lineno": 155,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000746",
                "name": "RequestFetching",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestFetching",
        "name": "RequestFetching",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000076",
        "description": "<p>Create a RequestState as a RequestFetching value</p>",
        "comment": "/**\n * Create a RequestState as a RequestFetching value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3453,
                3539
            ],
            "filename": "RequestState.js",
            "lineno": 164,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000757",
                "name": "RequestError",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestError",
        "name": "RequestError",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000077",
        "description": "<p>Create a RequestState as a RequestError value</p>",
        "comment": "/**\n * Create a RequestState as a RequestError value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "returns": [
            {
                "type": {
                    "names": [
                        "RequestState"
                    ]
                }
            }
        ],
        "meta": {
            "range": [
                3648,
                3736
            ],
            "filename": "RequestState.js",
            "lineno": 173,
            "path": "/Users/allanhortle/localhost/code/fronads/src",
            "code": {
                "id": "astnode100000768",
                "name": "RequestSuccess",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "value"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "name": "value"
            }
        ],
        "longname": "module:RequestState~RequestSuccess",
        "name": "RequestSuccess",
        "memberof": "module:RequestState",
        "scope": "inner",
        "kind": "function",
        "___s": true,
        "___id": "T000002R000078",
        "description": "<p>Create a RequestState as a RequestSuccess value</p>",
        "comment": "/**\n * Create a RequestState as a RequestSuccess value\n * @param {any} value\n * @return {RequestState}\n */"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "/Users/allanhortle/localhost/code/fronads/src/Either.js",
            "/Users/allanhortle/localhost/code/fronads/src/Maybe.js",
            "/Users/allanhortle/localhost/code/fronads/src/RequestState.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Either-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/Maybe-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/__test__/RequestState-test.js",
            "/Users/allanhortle/localhost/code/fronads/src/index.js"
        ],
        "___id": "T000002R000138",
        "___s": true
    }
]