{
    "module": {
        "heading": "Modules",
        "doclets": [
            {
                "meta": {
                    "range": [
                        219,
                        521
                    ],
                    "filename": "Either.js",
                    "lineno": 13,
                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                    "code": {}
                },
                "longname": "module:Either",
                "name": "Either",
                "doclets": [
                    {
                        "meta": {
                            "range": [
                                547,
                                2580
                            ],
                            "filename": "Either.js",
                            "lineno": 25,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000043",
                                "name": "Either",
                                "type": "ClassDeclaration",
                                "paramnames": [
                                    "value",
                                    "isRight"
                                ]
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "any"
                                    ]
                                },
                                "name": "value"
                            },
                            {
                                "type": {
                                    "names": [
                                        "boolean"
                                    ]
                                },
                                "name": "isRight"
                            }
                        ],
                        "longname": "module:Either~Either",
                        "classdesc": "<p>Either class</p>",
                        "name": "Either",
                        "doclets": [
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        851,
                                        899
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 42,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000064",
                                        "name": "Either#unit",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "value"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "any"
                                            ]
                                        },
                                        "name": "value"
                                    }
                                ],
                                "longname": "module:Either~Either#unit",
                                "name": "unit",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000013",
                                "description": "<p>Unit function</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        988,
                                        1058
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 51,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000073",
                                        "name": "Either#flatMap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Either~Either#flatMap",
                                "name": "flatMap",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000014",
                                "description": "<p>flatMap</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * flatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1143,
                                        1218
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 60,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000089",
                                        "name": "Either#map",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Either~Either#map",
                                "name": "map",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000015",
                                "description": "<p>map</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1311,
                                        1385
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 69,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000108",
                                        "name": "Either#leftFlatMap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Either~Either#leftFlatMap",
                                "name": "leftFlatMap",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000016",
                                "description": "<p>leftFlatMap</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * leftFlatMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1474,
                                        1552
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 78,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000124",
                                        "name": "Either#leftMap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Either~Either#leftMap",
                                "name": "leftMap",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000017",
                                "description": "<p>leftMap</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * leftMap\n     * @param {Function} fn\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1644,
                                        1743
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 87,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000141",
                                        "name": "Either#ap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "eitherWithFn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        },
                                        "name": "eitherWithFn"
                                    }
                                ],
                                "longname": "module:Either~Either#ap",
                                "name": "ap",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000018",
                                "description": "<p>ap</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * ap\n     * @param {Either} eitherWithFn\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "any"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1908,
                                        2010
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 97,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000163",
                                        "name": "Either#biMap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "leftFn",
                                            "rightFn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "leftFn"
                                    },
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "rightFn"
                                    }
                                ],
                                "longname": "module:Either~Either#biMap",
                                "name": "biMap",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000019",
                                "description": "<p>Provide functions to map both sides of the Either</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Provide functions to map both sides of the Either\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {any}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "any"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2135,
                                        2237
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 107,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000184",
                                        "name": "Either#biFlatMap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "leftFn",
                                            "rightFn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "leftFn"
                                    },
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "rightFn"
                                    }
                                ],
                                "longname": "module:Either~Either#biFlatMap",
                                "name": "biFlatMap",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000020",
                                "description": "<p>biFlatMap</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * biFlatMap\n     * @param {Function} leftFn\n     * @param {Function} rightFn\n     * @return {any}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "any"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2313,
                                        2353
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 115,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000205",
                                        "name": "Either#value",
                                        "type": "MethodDefinition",
                                        "paramnames": []
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [],
                                "longname": "module:Either~Either#value",
                                "name": "value",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000021",
                                "description": "<p>Return the current value.</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Return the current value.\n     * @return {any}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Maybe"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2413,
                                        2509
                                    ],
                                    "filename": "Either.js",
                                    "lineno": 123,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000213",
                                        "name": "Either#toMaybe",
                                        "type": "MethodDefinition",
                                        "paramnames": []
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [],
                                "longname": "module:Either~Either#toMaybe",
                                "name": "toMaybe",
                                "doclets": [],
                                "memberof": "module:Either~Either",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000022",
                                "description": "<p>toMaybe</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * toMaybe\n     * @return {Maybe}\n     */"
                            }
                        ],
                        "memberof": "module:Either",
                        "scope": "inner",
                        "kind": "class",
                        "___s": true,
                        "___id": "T000002R000009",
                        "parentKind": "module",
                        "comment": "/**\n * Either class\n */"
                    },
                    {
                        "returns": [
                            {
                                "type": {
                                    "names": [
                                        "Either"
                                    ]
                                }
                            }
                        ],
                        "meta": {
                            "range": [
                                2752,
                                2816
                            ],
                            "filename": "Either.js",
                            "lineno": 141,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000260",
                                "name": "Right",
                                "type": "FunctionDeclaration",
                                "paramnames": [
                                    "value"
                                ]
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "any"
                                    ]
                                },
                                "name": "value"
                            }
                        ],
                        "longname": "module:Either~Right",
                        "name": "Right",
                        "doclets": [],
                        "memberof": "module:Either",
                        "scope": "inner",
                        "kind": "function",
                        "___s": true,
                        "___id": "T000002R000025",
                        "description": "<p>Create an Either as a Right value</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Create an Either as a Right value\n * @param {any} value\n * @return {Either}\n */"
                    },
                    {
                        "returns": [
                            {
                                "type": {
                                    "names": [
                                        "Either"
                                    ]
                                }
                            }
                        ],
                        "meta": {
                            "range": [
                                2904,
                                2968
                            ],
                            "filename": "Either.js",
                            "lineno": 150,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000269",
                                "name": "Left",
                                "type": "FunctionDeclaration",
                                "paramnames": [
                                    "value"
                                ]
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "any"
                                    ]
                                },
                                "name": "value"
                            }
                        ],
                        "longname": "module:Either~Left",
                        "name": "Left",
                        "doclets": [],
                        "memberof": "module:Either",
                        "scope": "inner",
                        "kind": "function",
                        "___s": true,
                        "___id": "T000002R000026",
                        "description": "<p>Create an Either as a Left value</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Create an Either as a Left value\n * @param {any} value\n * @return {Either}\n */"
                    },
                    {
                        "returns": [
                            {
                                "type": {
                                    "names": [
                                        "Either"
                                    ]
                                }
                            }
                        ],
                        "meta": {
                            "range": [
                                3191,
                                3314
                            ],
                            "filename": "Either.js",
                            "lineno": 161,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000278",
                                "name": "Try",
                                "type": "FunctionDeclaration",
                                "paramnames": [
                                    "func"
                                ]
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "function"
                                    ]
                                },
                                "name": "func"
                            }
                        ],
                        "longname": "module:Either~Try",
                        "name": "Try",
                        "doclets": [],
                        "memberof": "module:Either",
                        "scope": "inner",
                        "kind": "function",
                        "___s": true,
                        "___id": "T000002R000027",
                        "description": "<p>Create a Try Either. <code>func</code> is immediately exceuted,\nif an error is thrown the Either will be Left(error) otherwise\nthe value of <code>func</code> is passed to a Right.</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Create a Try Either. `func` is immediately exceuted,\n * if an error is thrown the Either will be Left(error) otherwise\n * the value of `func` is passed to a Right.\n * @param {Function} func\n * @return {Either}\n */"
                    }
                ],
                "kind": "module",
                "___s": true,
                "___id": "T000002R000002",
                "description": "<p>The Either monad describes situations that have two distinct states: Right and Left. Often used\nIf the Either is Right map/Flatmap will be called and if the Either is Left leftMap/leftFlatMap will be called.</p>\n<p>If Identity has 1 state, Maybe has 1.5, Either has 2.</p>",
                "comment": "/**\n * The Either monad describes situations that have two distinct states: Right and Left. Often used\n * If the Either is Right map/Flatmap will be called and if the Either is Left leftMap/leftFlatMap will be called.\n *\n * If Identity has 1 state, Maybe has 1.5, Either has 2.\n *\n * @module Either\n */"
            },
            {
                "meta": {
                    "range": [
                        541,
                        1297
                    ],
                    "filename": "Identity.js",
                    "lineno": 30,
                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                    "code": {}
                },
                "longname": "module:Identity",
                "name": "Identity",
                "doclets": [
                    {
                        "meta": {
                            "range": [
                                1325,
                                2639
                            ],
                            "filename": "Identity.js",
                            "lineno": 76,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000327",
                                "name": "Identity",
                                "type": "ClassDeclaration",
                                "paramnames": [
                                    "value"
                                ]
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "*"
                                    ]
                                },
                                "description": "<p>The value to store</p>",
                                "name": "value"
                            }
                        ],
                        "longname": "module:Identity~Identity",
                        "classdesc": "<p>Identity class</p>",
                        "name": "Identity",
                        "doclets": [
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Identity"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1616,
                                        1674
                                    ],
                                    "filename": "Identity.js",
                                    "lineno": 93,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000341",
                                        "name": "Identity#unit",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "value"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "any"
                                            ]
                                        },
                                        "name": "value"
                                    }
                                ],
                                "longname": "module:Identity~Identity#unit",
                                "name": "unit",
                                "doclets": [],
                                "memberof": "module:Identity~Identity",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000036",
                                "description": "<p>Unit function</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Identity}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Some"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1822,
                                        1870
                                    ],
                                    "filename": "Identity.js",
                                    "lineno": 103,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000350",
                                        "name": "Identity#flatMap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "description": "<p>perform a flatMap</p>",
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Identity~Identity#flatMap",
                                "name": "flatMap",
                                "doclets": [],
                                "memberof": "module:Identity~Identity",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000037",
                                "description": "<p>Perform a flatMap on the current identity</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Perform a flatMap on the current identity\n     *\n     * @param {Function} fn - perform a flatMap\n     * @return {Some}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Identity"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1957,
                                        2032
                                    ],
                                    "filename": "Identity.js",
                                    "lineno": 112,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000361",
                                        "name": "Identity#map",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Identity~Identity#map",
                                "name": "map",
                                "doclets": [],
                                "memberof": "module:Identity~Identity",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000038",
                                "description": "<p>map</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Identity}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "*"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2193,
                                        2286
                                    ],
                                    "filename": "Identity.js",
                                    "lineno": 121,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000380",
                                        "name": "Identity#value",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "defaultValue"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "*"
                                            ]
                                        },
                                        "optional": true,
                                        "defaultvalue": null,
                                        "name": "defaultValue"
                                    }
                                ],
                                "longname": "module:Identity~Identity#value",
                                "name": "value",
                                "doclets": [],
                                "memberof": "module:Identity~Identity",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000039",
                                "description": "<p>Return the identity's value. If the value is null, return <code>defaultValue</code></p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Return the identity's value. If the value is null, return `defaultValue`\n     * @param {*} [defaultValue = null]\n     * @return {*}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2378,
                                        2441
                                    ],
                                    "filename": "Identity.js",
                                    "lineno": 129,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000398",
                                        "name": "Identity#toEither",
                                        "type": "MethodDefinition",
                                        "paramnames": []
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [],
                                "longname": "module:Identity~Identity#toEither",
                                "name": "toEither",
                                "doclets": [],
                                "memberof": "module:Identity~Identity",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000040",
                                "description": "<p>Change the Identity to a Right Either.</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Change the Identity to a Right Either.\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Maybe"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2530,
                                        2590
                                    ],
                                    "filename": "Identity.js",
                                    "lineno": 137,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000412",
                                        "name": "Identity#toMaybe",
                                        "type": "MethodDefinition",
                                        "paramnames": []
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [],
                                "longname": "module:Identity~Identity#toMaybe",
                                "name": "toMaybe",
                                "doclets": [],
                                "memberof": "module:Identity~Identity",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000041",
                                "description": "<p>Change the Identity to a Some Maybe.</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Change the Identity to a Some Maybe.\n     * @return {Maybe}\n     */"
                            }
                        ],
                        "memberof": "module:Identity",
                        "scope": "inner",
                        "kind": "class",
                        "___s": true,
                        "___id": "T000002R000033",
                        "description": "<p>Identity constructor</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Identity class\n */"
                    }
                ],
                "kind": "module",
                "___s": true,
                "___id": "T000002R000028",
                "description": "<p>Identity is the vanilla ice cream of monads. Plain and simple, it is a function composer with only one state.\nIdentity says: &quot;I will always map your function to my value&quot;.</p>\n<pre class=\"prettyprint source\"><code>// Composition\nfoo(bar(value));\n\n// Compose\nCompose(foo, bar)(value);\n\n// Identity\nIdentity(value)\n    .map(bar)\n    .map(value)\n    .value();</code></pre><h3>Examples</h3><ul>\n<li>Hocks</li>\n<li>repeated Composition.</li>\n</ul>\n<pre class=\"prettyprint source lang-js\"><code>import {Identity} from 'fronads';\n\nconst add = aa => bb => aa + bb;\n\nIdentity(5)\n    .map(add(2))\n    .map(add(-10))\n    .value();\n// -3\n\n\n// Hocking a React component.\nSome(UserProfile)\n    .map(connect(({user}) => ({user}))\n    .value();</code></pre>",
                "comment": "/**\n * Identity is the vanilla ice cream of monads. Plain and simple, it is a function composer with only one state.\n * Identity says: \"I will always map your function to my value\".\n *\n * ```\n * // Composition\n * foo(bar(value));\n *\n * // Compose\n * Compose(foo, bar)(value);\n *\n * // Identity\n * Identity(value)\n *     .map(bar)\n *     .map(value)\n *     .value();\n *\n * ```\n *\n * ### Examples\n * * Hocks\n * * repeated Composition.\n *\n * ```js\n * import {Identity} from 'fronads';\n *\n * const add = aa => bb => aa + bb;\n *\n * Identity(5)\n *     .map(add(2))\n *     .map(add(-10))\n *     .value();\n * // -3\n *\n *\n * // Hocking a React component.\n * Some(UserProfile)\n *     .map(connect(({user}) => ({user}))\n *     .value();\n * ```\n * @module Identity\n */"
            },
            {
                "meta": {
                    "range": [
                        439,
                        1143
                    ],
                    "filename": "Maybe.js",
                    "lineno": 20,
                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                    "code": {}
                },
                "longname": "module:Maybe",
                "name": "Maybe",
                "doclets": [
                    {
                        "meta": {
                            "range": [
                                1168,
                                2724
                            ],
                            "filename": "Maybe.js",
                            "lineno": 50,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000518",
                                "name": "Maybe",
                                "type": "ClassDeclaration",
                                "paramnames": [
                                    "value",
                                    "isSome"
                                ]
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "*"
                                    ]
                                },
                                "description": "<p>The value to store</p>",
                                "name": "value"
                            },
                            {
                                "type": {
                                    "names": [
                                        "boolean"
                                    ]
                                },
                                "description": "<p>Whether or not the maybe is <code>some</code> or <code>none</code></p>",
                                "name": "isSome"
                            }
                        ],
                        "longname": "module:Maybe~Maybe",
                        "classdesc": "<p>Maybe class</p>",
                        "name": "Maybe",
                        "doclets": [
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1564,
                                        1611
                                    ],
                                    "filename": "Maybe.js",
                                    "lineno": 69,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000539",
                                        "name": "Maybe#unit",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "value"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "any"
                                            ]
                                        },
                                        "name": "value"
                                    }
                                ],
                                "longname": "module:Maybe~Maybe#unit",
                                "name": "unit",
                                "doclets": [],
                                "memberof": "module:Maybe~Maybe",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000060",
                                "description": "<p>Unit function</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Unit function\n     * @param {any} value\n     * @return {Either}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Some"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1764,
                                        1833
                                    ],
                                    "filename": "Maybe.js",
                                    "lineno": 79,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000548",
                                        "name": "Maybe#flatMap",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "description": "<p>perform a flatMap if Some</p>",
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Maybe~Maybe#flatMap",
                                "name": "flatMap",
                                "doclets": [],
                                "memberof": "module:Maybe~Maybe",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000061",
                                "description": "<p>Perform a flatMap on the current maybe</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Perform a flatMap on the current maybe\n     *\n     * @param {Function} fn - perform a flatMap if Some\n     * @return {Some}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Maybe"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        1917,
                                        1992
                                    ],
                                    "filename": "Maybe.js",
                                    "lineno": 88,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000564",
                                        "name": "Maybe#map",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "fn"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "function"
                                            ]
                                        },
                                        "name": "fn"
                                    }
                                ],
                                "longname": "module:Maybe~Maybe#map",
                                "name": "map",
                                "doclets": [],
                                "memberof": "module:Maybe~Maybe",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000062",
                                "description": "<p>map</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * map\n     * @param {Function} fn\n     * @return {Maybe}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "*"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2172,
                                        2265
                                    ],
                                    "filename": "Maybe.js",
                                    "lineno": 97,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000583",
                                        "name": "Maybe#value",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "defaultValue"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "*"
                                            ]
                                        },
                                        "optional": true,
                                        "defaultvalue": null,
                                        "description": "<p>value that is Some</p>",
                                        "name": "defaultValue"
                                    }
                                ],
                                "longname": "module:Maybe~Maybe#value",
                                "name": "value",
                                "doclets": [],
                                "memberof": "module:Maybe~Maybe",
                                "scope": "instance",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000063",
                                "description": "<p>Return the maybe's value if it is 'some' or else return <code>defaultValue</code></p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Return the maybe's value if it is 'some' or else return `defaultValue`\n     * @param {*} [defaultValue = null] - value that is Some\n     * @return {*}\n     */"
                            },
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "Either"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        2537,
                                        2654
                                    ],
                                    "filename": "Maybe.js",
                                    "lineno": 109,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100000601",
                                        "name": "Maybe#toEither",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "leftValue"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "*"
                                            ]
                                        },
                                        "description": "<p>Value to place in the Left side</p>",
                                        "name": "leftValue"
                                    }
                                ],
                                "longname": "module:Maybe~Maybe~toEither",
                                "name": "toEither",
                                "doclets": [],
                                "memberof": "module:Maybe~Maybe",
                                "scope": "inner",
                                "kind": "function",
                                "___s": true,
                                "___id": "T000002R000064",
                                "description": "<p>Change the Maybe to an Either. If <code>Some</code> the value is placed in <code>Right</code>\nif <code>None</code> the value of <code>leftValue</code> is placed in a <code>Left</code></p>",
                                "parentKind": "module",
                                "comment": "/**\n     * Change the Maybe to an Either. If `Some` the value is placed in `Right`\n     * if `None` the value of `leftValue` is placed in a `Left`\n     *\n     * @inner\n     * @param {*} leftValue - Value to place in the Left side\n     * @return {Either}\n     */"
                            }
                        ],
                        "memberof": "module:Maybe",
                        "scope": "inner",
                        "kind": "class",
                        "___s": true,
                        "___id": "T000002R000056",
                        "description": "<p>Maybe constructor</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Maybe class\n */"
                    },
                    {
                        "returns": [
                            {
                                "type": {
                                    "names": [
                                        "Maybe"
                                    ]
                                }
                            }
                        ],
                        "meta": {
                            "range": [
                                3006,
                                3068
                            ],
                            "filename": "Maybe.js",
                            "lineno": 133,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000650",
                                "name": "Some",
                                "type": "FunctionDeclaration",
                                "paramnames": [
                                    "value"
                                ]
                            }
                        },
                        "params": [],
                        "longname": "module:Maybe~Some",
                        "examples": [
                            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: Some({\n        name: \"Derek Tibbs Jr\"\n    })\n});"
                        ],
                        "name": "Some",
                        "doclets": [],
                        "memberof": "module:Maybe",
                        "scope": "inner",
                        "kind": "function",
                        "___s": true,
                        "___id": "T000002R000067",
                        "description": "<p>Creates a new Maybe as 'Some' value</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Creates a new Maybe as 'Some' value\n * @return {Maybe}\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: Some({\n *         name: \"Derek Tibbs Jr\"\n *     })\n * });\n */"
                    },
                    {
                        "meta": {
                            "range": [
                                3211,
                                3268
                            ],
                            "filename": "Maybe.js",
                            "lineno": 146,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000659",
                                "name": "None",
                                "type": "FunctionDeclaration",
                                "paramnames": []
                            }
                        },
                        "params": [],
                        "longname": "module:Maybe~None",
                        "examples": [
                            "var person = Some({\n    name: \"Derek Tibbs\",\n    child: None()\n});"
                        ],
                        "name": "None",
                        "doclets": [],
                        "memberof": "module:Maybe",
                        "scope": "inner",
                        "kind": "function",
                        "___s": true,
                        "___id": "T000002R000068",
                        "description": "<p>Creates a new Maybe as 'None' value</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Creates a new Maybe as 'None' value\n *\n * @example\n * var person = Some({\n *     name: \"Derek Tibbs\",\n *     child: None()\n * });\n */"
                    },
                    {
                        "returns": [
                            {
                                "type": {
                                    "names": [
                                        "Maybe"
                                    ]
                                }
                            }
                        ],
                        "meta": {
                            "range": [
                                3427,
                                3503
                            ],
                            "filename": "Maybe.js",
                            "lineno": 157,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000667",
                                "name": "Perhaps",
                                "type": "FunctionDeclaration",
                                "paramnames": [
                                    "value"
                                ]
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "any"
                                    ]
                                },
                                "name": "value"
                            }
                        ],
                        "longname": "module:Maybe~Perhaps",
                        "examples": [
                            "var person = Perhaps(possibleNullValue);"
                        ],
                        "name": "Perhaps",
                        "doclets": [],
                        "memberof": "module:Maybe",
                        "scope": "inner",
                        "kind": "function",
                        "___s": true,
                        "___id": "T000002R000069",
                        "description": "<p>Create a new Maybe where the value is uncertain.</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Create a new Maybe where the value is uncertain.\n * @param {any} value\n * @return {Maybe}\n * @example\n * var person = Perhaps(possibleNullValue);\n */"
                    },
                    {
                        "returns": [
                            {
                                "type": {
                                    "names": [
                                        "Maybe"
                                    ]
                                }
                            }
                        ],
                        "meta": {
                            "range": [
                                3719,
                                3864
                            ],
                            "filename": "Maybe.js",
                            "lineno": 169,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {
                                "id": "astnode100000681",
                                "name": "PerhapsIn",
                                "type": "FunctionDeclaration",
                                "paramnames": [
                                    "value",
                                    "path"
                                ]
                            },
                            "vars": {
                                "deepValue": "module:Maybe~PerhapsIn~deepValue"
                            }
                        },
                        "params": [
                            {
                                "type": {
                                    "names": [
                                        "any"
                                    ]
                                },
                                "name": "value"
                            },
                            {
                                "type": {
                                    "names": [
                                        "Array.<string>"
                                    ]
                                },
                                "name": "path"
                            }
                        ],
                        "longname": "module:Maybe~PerhapsIn",
                        "examples": [
                            "var person = PerhapsIn({foo: {bar: possibleNullValue}}, ['foo', 'bar']);"
                        ],
                        "name": "PerhapsIn",
                        "doclets": [],
                        "memberof": "module:Maybe",
                        "scope": "inner",
                        "kind": "function",
                        "___s": true,
                        "___id": "T000002R000070",
                        "description": "<p>Create a new Maybe from a deep uncertain value.</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Create a new Maybe from a deep uncertain value.\n * @param {any} value\n * @param {string[]} path\n * @return {Maybe}\n * @example\n * var person = PerhapsIn({foo: {bar: possibleNullValue}}, ['foo', 'bar']);\n */"
                    }
                ],
                "kind": "module",
                "___s": true,
                "___id": "T000002R000044",
                "description": "<p>The maybe monad is a way to represent null values without being forced to check for their existence. Maybe is the identity monad but with an added condition. The maybe says &quot;I will only ever call map/flatmap if I am a Some. &quot;</p>\n<pre class=\"prettyprint source\"><code>Some(5).map(ii => ii * 2) // Some(10)\nNone().map(ii => ii * 2) // None()</code></pre><p>Maybe lets you declaratively write what should happen to data, but only excecutes if that data exists.</p>\n<h3>Units</h3><p>Some(value)\nNone()\nPerhaps(value)\nPerhapsIn(value, path)</p>\n<h3>Examples</h3><h4>Unknown Deep Children</h4><h4>Don't Render without data</h4><p>####</p>\n<ul>\n<li><a href=\"#module:Maybe~Some\">Some</a></li>\n<li><a href=\"#module:Maybe~None\">None</a></li>\n</ul>",
                "comment": "/**\n * The maybe monad is a way to represent null values without being forced to check for their existence. Maybe is the identity monad but with an added condition. The maybe says \"I will only ever call map/flatmap if I am a Some. \"\n *\n *\n * ```\n * Some(5).map(ii => ii * 2) // Some(10)\n * None().map(ii => ii * 2) // None()\n * ```\n *\n * Maybe lets you declaratively write what should happen to data, but only excecutes if that data exists.\n *\n * ### Units\n * Some(value)\n * None()\n * Perhaps(value)\n * PerhapsIn(value, path)\n *\n * ### Examples\n * #### Unknown Deep Children\n * #### Don't Render without data\n * ####\n *\n * * [Some](#module:Maybe~Some)\n * * [None](#module:Maybe~None)\n * @module Maybe\n */"
            },
            {
                "comment": "/**\n * @module State\n */",
                "meta": {
                    "range": [
                        651,
                        675
                    ],
                    "filename": "StateFunctor.js",
                    "lineno": 27,
                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                    "code": {}
                },
                "kind": "module",
                "name": "State",
                "longname": "module:State",
                "___id": "T000002R000114",
                "___s": true,
                "doclets": [
                    {
                        "meta": {
                            "range": [
                                2096,
                                2831
                            ],
                            "filename": "StateFunctor.js",
                            "lineno": 77,
                            "path": "/Users/allanhortle/localhost/code/fronads/src",
                            "code": {}
                        },
                        "longname": "module:State~StateFunctor",
                        "examples": [
                            "StateFunctor(['Empty', 'Fetching', 'Refetching', 'Error', 'Success'])\n// {\n//      EmptyState: EmptyState,\n//      FetchingState: FetchingState,\n//      RefetchingState: RefetchingState,\n//      ErrorState: ErrorState,\n//      SuccessState: SuccessState\n// }\n\nStateFunctor(['New', 'Edit', 'View'])\n// {\n//      NewState: NewState,\n//      EditState: EditState,\n//      ViewState: ViewState\n// }"
                        ],
                        "name": "StateFunctor",
                        "doclets": [
                            {
                                "returns": [
                                    {
                                        "type": {
                                            "names": [
                                                "State"
                                            ]
                                        }
                                    }
                                ],
                                "meta": {
                                    "range": [
                                        902,
                                        1984
                                    ],
                                    "filename": "StateFunctor.js",
                                    "lineno": 39,
                                    "path": "/Users/allanhortle/localhost/code/fronads/src",
                                    "code": {
                                        "id": "astnode100001122",
                                        "name": "StateFunctor",
                                        "type": "MethodDefinition",
                                        "paramnames": [
                                            "value",
                                            "stateBooleans"
                                        ]
                                    },
                                    "vars": {
                                        "": null
                                    }
                                },
                                "params": [
                                    {
                                        "type": {
                                            "names": [
                                                "*"
                                            ]
                                        },
                                        "description": "<p>The value to store</p>",
                                        "name": "value"
                                    },
                                    {
                                        "type": {
                                            "names": [
                                                "object"
                                            ]
                                        },
                                        "description": "<p>Whether or not the maybe is <code>some</code> or <code>none</code></p>",
                                        "name": "stateBooleans"
                                    }
                                ],
                                "longname": "module:State~StateFunctor.StateFunctor",
                                "name": "StateFunctor",
                                "doclets": [],
                                "memberof": "module:State~StateFunctor",
                                "scope": "static",
                                "kind": "class",
                                "___s": true,
                                "___id": "T000002R000116",
                                "description": "<p>State constructor</p>",
                                "parentKind": "module",
                                "comment": "/**\n     * State constructor\n     *\n     * @param {*} value - The value to store\n     * @param {object} stateBooleans - Whether or not the maybe is `some` or `none`\n     * @return {State}\n     */"
                            }
                        ],
                        "memberof": "module:State",
                        "scope": "inner",
                        "kind": "member",
                        "___s": true,
                        "___id": "T000002R000131",
                        "description": "<p>Sometimes the state of your app can be represented through more than two states.\nThe StateMonadFactory lets you create a monad with an arbitary number of state.</p>\n<p>Given an array of names it will returns an on object of custom Unit functions.</p>",
                        "parentKind": "module",
                        "comment": "/**\n * Sometimes the state of your app can be represented through more than two states.\n * The StateMonadFactory lets you create a monad with an arbitary number of state.\n *\n * Given an array of names it will returns an on object of custom Unit functions.\n *\n * @name StateFunctor\n * @example\n * StateFunctor(['Empty', 'Fetching', 'Refetching', 'Error', 'Success'])\n * // {\n * //      EmptyState: EmptyState,\n * //      FetchingState: FetchingState,\n * //      RefetchingState: RefetchingState,\n * //      ErrorState: ErrorState,\n * //      SuccessState: SuccessState\n * // }\n *\n * StateFunctor(['New', 'Edit', 'View'])\n * // {\n * //      NewState: NewState,\n * //      EditState: EditState,\n * //      ViewState: ViewState\n * // }\n */"
                    }
                ]
            }
        ]
    }
}